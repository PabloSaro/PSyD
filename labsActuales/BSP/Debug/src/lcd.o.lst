   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"lcd.c"
  21              	.Ltext0:
  22              		.file 1 "../src/lcd.c"
 1703              		.align	2
 1704              	lcd_buffer:
 1705 0000 00000000 		.space	38400
 1705      00000000 
 1705      00000000 
 1705      00000000 
 1705      00000000 
 1706              	state:
 1707 9600 00       		.space	1
 1708 9601 000000   		.text
 1709              		.align	2
 1710              		.global	lcd_init
 1712              	lcd_init:
 1713              	.LFB0:
   1:../src/lcd.c  **** 
   2:../src/lcd.c  **** #include <s3c44b0x.h>
   3:../src/lcd.c  **** #include <lcd.h>
   4:../src/lcd.c  **** 
   5:../src/lcd.c  **** extern uint8 font[];
   6:../src/lcd.c  **** static uint8 lcd_buffer[LCD_BUFFER_SIZE];
   7:../src/lcd.c  **** 
   8:../src/lcd.c  **** static uint8 state;
   9:../src/lcd.c  **** 
  10:../src/lcd.c  **** void lcd_init( void )
  11:../src/lcd.c  **** {      
 1714              		.loc 1 11 0
 1715              		.cfi_startproc
 1716              		@ Function supports interworking.
 1717              		@ args = 0, pretend = 0, frame = 0
 1718              		@ frame_needed = 1, uses_anonymous_args = 0
 1719 0000 0DC0A0E1 		mov	ip, sp
 1720              	.LCFI0:
 1721              		.cfi_def_cfa_register 12
 1722 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1723 0008 04B04CE2 		sub	fp, ip, #4
 1724              		.cfi_offset 14, -8
 1725              		.cfi_offset 13, -12
 1726              		.cfi_offset 11, -16
 1727              	.LCFI1:
 1728              		.cfi_def_cfa 11, 4
  12:../src/lcd.c  ****     DITHMODE = 0x12210;
 1729              		.loc 1 12 0
 1730 000c FC309FE5 		ldr	r3, .L2
 1731 0010 FC209FE5 		ldr	r2, .L2+4
 1732 0014 002083E5 		str	r2, [r3, #0]
  13:../src/lcd.c  ****     DP1_2    = 0xA5A5;
 1733              		.loc 1 13 0
 1734 0018 F8309FE5 		ldr	r3, .L2+8
 1735 001c F8209FE5 		ldr	r2, .L2+12
 1736 0020 002083E5 		str	r2, [r3, #0]
  14:../src/lcd.c  ****     DP4_7    = 0xBA5DA65;
 1737              		.loc 1 14 0
 1738 0024 F4309FE5 		ldr	r3, .L2+16
 1739 0028 F4209FE5 		ldr	r2, .L2+20
 1740 002c 002083E5 		str	r2, [r3, #0]
  15:../src/lcd.c  ****     DP3_5    = 0xA5A5F;
 1741              		.loc 1 15 0
 1742 0030 F0309FE5 		ldr	r3, .L2+24
 1743 0034 F0209FE5 		ldr	r2, .L2+28
 1744 0038 002083E5 		str	r2, [r3, #0]
  16:../src/lcd.c  ****     DP2_3    = 0xD6B;
 1745              		.loc 1 16 0
 1746 003c EC309FE5 		ldr	r3, .L2+32
 1747 0040 EC209FE5 		ldr	r2, .L2+36
 1748 0044 002083E5 		str	r2, [r3, #0]
  17:../src/lcd.c  ****     DP5_7    = 0xEB7B5ED;
 1749              		.loc 1 17 0
 1750 0048 E8309FE5 		ldr	r3, .L2+40
 1751 004c E8209FE5 		ldr	r2, .L2+44
 1752 0050 002083E5 		str	r2, [r3, #0]
  18:../src/lcd.c  ****     DP3_4    = 0x7DBE;
 1753              		.loc 1 18 0
 1754 0054 E4309FE5 		ldr	r3, .L2+48
 1755 0058 E4209FE5 		ldr	r2, .L2+52
 1756 005c 002083E5 		str	r2, [r3, #0]
  19:../src/lcd.c  ****     DP4_5    = 0x7EBDF ;
 1757              		.loc 1 19 0
 1758 0060 E0309FE5 		ldr	r3, .L2+56
 1759 0064 E0209FE5 		ldr	r2, .L2+60
 1760 0068 002083E5 		str	r2, [r3, #0]
  20:../src/lcd.c  ****     DP6_7    = 0x7FDFBFE;
 1761              		.loc 1 20 0
 1762 006c DC309FE5 		ldr	r3, .L2+64
 1763 0070 DC209FE5 		ldr	r2, .L2+68
 1764 0074 002083E5 		str	r2, [r3, #0]
  21:../src/lcd.c  ****     
  22:../src/lcd.c  ****     REDLUT   = 0x0;
 1765              		.loc 1 22 0
 1766 0078 D8309FE5 		ldr	r3, .L2+72
 1767 007c 0020A0E3 		mov	r2, #0
 1768 0080 002083E5 		str	r2, [r3, #0]
  23:../src/lcd.c  ****     GREENLUT = 0x0;
 1769              		.loc 1 23 0
 1770 0084 D0309FE5 		ldr	r3, .L2+76
 1771 0088 0020A0E3 		mov	r2, #0
 1772 008c 002083E5 		str	r2, [r3, #0]
  24:../src/lcd.c  ****     BLUELUT  = 0x0;
 1773              		.loc 1 24 0
 1774 0090 C8309FE5 		ldr	r3, .L2+80
 1775 0094 0020A0E3 		mov	r2, #0
 1776 0098 002083E5 		str	r2, [r3, #0]
  25:../src/lcd.c  **** 
  26:../src/lcd.c  ****     LCDCON1  = 0x1C020;
 1777              		.loc 1 26 0
 1778 009c 1F36A0E3 		mov	r3, #32505856
 1779 00a0 BC209FE5 		ldr	r2, .L2+84
 1780 00a4 002083E5 		str	r2, [r3, #0]
  27:../src/lcd.c  ****     LCDCON2  = 0x13CEF;
 1781              		.loc 1 27 0
 1782 00a8 B8309FE5 		ldr	r3, .L2+88
 1783 00ac B8209FE5 		ldr	r2, .L2+92
 1784 00b0 002083E5 		str	r2, [r3, #0]
  28:../src/lcd.c  ****     LCDCON3  = 0x0;
 1785              		.loc 1 28 0
 1786 00b4 B4309FE5 		ldr	r3, .L2+96
 1787 00b8 0020A0E3 		mov	r2, #0
 1788 00bc 002083E5 		str	r2, [r3, #0]
  29:../src/lcd.c  **** 
  30:../src/lcd.c  ****     LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 1789              		.loc 1 30 0
 1790 00c0 AC309FE5 		ldr	r3, .L2+100
 1791 00c4 AC209FE5 		ldr	r2, .L2+104
 1792 00c8 A220A0E1 		mov	r2, r2, lsr #1
 1793 00cc 012282E3 		orr	r2, r2, #268435456
 1794 00d0 002083E5 		str	r2, [r3, #0]
  31:../src/lcd.c  ****     LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 1795              		.loc 1 31 0
 1796 00d4 A0209FE5 		ldr	r2, .L2+108
 1797 00d8 98309FE5 		ldr	r3, .L2+104
 1798 00dc 963C83E2 		add	r3, r3, #38400
 1799 00e0 FF34C3E3 		bic	r3, r3, #-16777216
 1800 00e4 0335C3E3 		bic	r3, r3, #12582912
 1801 00e8 A330A0E1 		mov	r3, r3, lsr #1
 1802 00ec 023283E3 		orr	r3, r3, #536870912
 1803 00f0 003082E5 		str	r3, [r2, #0]
  32:../src/lcd.c  ****     LCDSADDR3 = 0x50;
 1804              		.loc 1 32 0
 1805 00f4 84309FE5 		ldr	r3, .L2+112
 1806 00f8 5020A0E3 		mov	r2, #80
 1807 00fc 002083E5 		str	r2, [r3, #0]
  33:../src/lcd.c  ****     
  34:../src/lcd.c  ****     lcd_off();
 1808              		.loc 1 34 0
 1809 0100 FEFFFFEB 		bl	lcd_off
  35:../src/lcd.c  **** 
  36:../src/lcd.c  **** }
 1810              		.loc 1 36 0
 1811 0104 0CD04BE2 		sub	sp, fp, #12
 1812 0108 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1813 010c 1EFF2FE1 		bx	lr
 1814              	.L3:
 1815              		.align	2
 1816              	.L2:
 1817 0110 4400F001 		.word	32505924
 1818 0114 10220100 		.word	74256
 1819 0118 2000F001 		.word	32505888
 1820 011c A5A50000 		.word	42405
 1821 0120 2400F001 		.word	32505892
 1822 0124 65DAA50B 		.word	195418725
 1823 0128 2800F001 		.word	32505896
 1824 012c 5F5A0A00 		.word	678495
 1825 0130 2C00F001 		.word	32505900
 1826 0134 6B0D0000 		.word	3435
 1827 0138 3000F001 		.word	32505904
 1828 013c EDB5B70E 		.word	246920685
 1829 0140 3400F001 		.word	32505908
 1830 0144 BE7D0000 		.word	32190
 1831 0148 3800F001 		.word	32505912
 1832 014c DFEB0700 		.word	519135
 1833 0150 3C00F001 		.word	32505916
 1834 0154 FEFBFD07 		.word	134085630
 1835 0158 1400F001 		.word	32505876
 1836 015c 1800F001 		.word	32505880
 1837 0160 1C00F001 		.word	32505884
 1838 0164 20C00100 		.word	114720
 1839 0168 0400F001 		.word	32505860
 1840 016c EF3C0100 		.word	81135
 1841 0170 4000F001 		.word	32505920
 1842 0174 0800F001 		.word	32505864
 1843 0178 00000000 		.word	lcd_buffer
 1844 017c 0C00F001 		.word	32505868
 1845 0180 1000F001 		.word	32505872
 1846              		.cfi_endproc
 1847              	.LFE0:
 1849              		.align	2
 1850              		.global	lcd_on
 1852              	lcd_on:
 1853              	.LFB1:
  37:../src/lcd.c  **** 
  38:../src/lcd.c  **** void lcd_on( void )
  39:../src/lcd.c  **** {
 1854              		.loc 1 39 0
 1855              		.cfi_startproc
 1856              		@ Function supports interworking.
 1857              		@ args = 0, pretend = 0, frame = 0
 1858              		@ frame_needed = 1, uses_anonymous_args = 0
 1859 0184 0DC0A0E1 		mov	ip, sp
 1860              	.LCFI2:
 1861              		.cfi_def_cfa_register 12
 1862 0188 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1863 018c 04B04CE2 		sub	fp, ip, #4
 1864              		.cfi_offset 14, -8
 1865              		.cfi_offset 13, -12
 1866              		.cfi_offset 11, -16
 1867              	.LCFI3:
 1868              		.cfi_def_cfa 11, 4
  40:../src/lcd.c  ****     LCDCON1 |= 1;
 1869              		.loc 1 40 0
 1870 0190 1F36A0E3 		mov	r3, #32505856
 1871 0194 1F26A0E3 		mov	r2, #32505856
 1872 0198 002092E5 		ldr	r2, [r2, #0]
 1873 019c 012082E3 		orr	r2, r2, #1
 1874 01a0 002083E5 		str	r2, [r3, #0]
  41:../src/lcd.c  ****     state = 1;
 1875              		.loc 1 41 0
 1876 01a4 10309FE5 		ldr	r3, .L5
 1877 01a8 0120A0E3 		mov	r2, #1
 1878 01ac 0020C3E5 		strb	r2, [r3, #0]
  42:../src/lcd.c  **** }
 1879              		.loc 1 42 0
 1880 01b0 0CD04BE2 		sub	sp, fp, #12
 1881 01b4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1882 01b8 1EFF2FE1 		bx	lr
 1883              	.L6:
 1884              		.align	2
 1885              	.L5:
 1886 01bc 00960000 		.word	state
 1887              		.cfi_endproc
 1888              	.LFE1:
 1890              		.align	2
 1891              		.global	lcd_off
 1893              	lcd_off:
 1894              	.LFB2:
  43:../src/lcd.c  **** 
  44:../src/lcd.c  **** void lcd_off( void )
  45:../src/lcd.c  **** {
 1895              		.loc 1 45 0
 1896              		.cfi_startproc
 1897              		@ Function supports interworking.
 1898              		@ args = 0, pretend = 0, frame = 0
 1899              		@ frame_needed = 1, uses_anonymous_args = 0
 1900 01c0 0DC0A0E1 		mov	ip, sp
 1901              	.LCFI4:
 1902              		.cfi_def_cfa_register 12
 1903 01c4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1904 01c8 04B04CE2 		sub	fp, ip, #4
 1905              		.cfi_offset 14, -8
 1906              		.cfi_offset 13, -12
 1907              		.cfi_offset 11, -16
 1908              	.LCFI5:
 1909              		.cfi_def_cfa 11, 4
  46:../src/lcd.c  ****     LCDCON1 &= ~(1<<0);
 1910              		.loc 1 46 0
 1911 01cc 1F36A0E3 		mov	r3, #32505856
 1912 01d0 1F26A0E3 		mov	r2, #32505856
 1913 01d4 002092E5 		ldr	r2, [r2, #0]
 1914 01d8 0120C2E3 		bic	r2, r2, #1
 1915 01dc 002083E5 		str	r2, [r3, #0]
  47:../src/lcd.c  ****     state = 0;
 1916              		.loc 1 47 0
 1917 01e0 10309FE5 		ldr	r3, .L8
 1918 01e4 0020A0E3 		mov	r2, #0
 1919 01e8 0020C3E5 		strb	r2, [r3, #0]
  48:../src/lcd.c  **** }
 1920              		.loc 1 48 0
 1921 01ec 0CD04BE2 		sub	sp, fp, #12
 1922 01f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1923 01f4 1EFF2FE1 		bx	lr
 1924              	.L9:
 1925              		.align	2
 1926              	.L8:
 1927 01f8 00960000 		.word	state
 1928              		.cfi_endproc
 1929              	.LFE2:
 1931              		.align	2
 1932              		.global	lcd_status
 1934              	lcd_status:
 1935              	.LFB3:
  49:../src/lcd.c  **** 
  50:../src/lcd.c  **** uint8 lcd_status( void )
  51:../src/lcd.c  **** {
 1936              		.loc 1 51 0
 1937              		.cfi_startproc
 1938              		@ Function supports interworking.
 1939              		@ args = 0, pretend = 0, frame = 0
 1940              		@ frame_needed = 1, uses_anonymous_args = 0
 1941 01fc 0DC0A0E1 		mov	ip, sp
 1942              	.LCFI6:
 1943              		.cfi_def_cfa_register 12
 1944 0200 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1945 0204 04B04CE2 		sub	fp, ip, #4
 1946              		.cfi_offset 14, -8
 1947              		.cfi_offset 13, -12
 1948              		.cfi_offset 11, -16
 1949              	.LCFI7:
 1950              		.cfi_def_cfa 11, 4
  52:../src/lcd.c  ****     return state;
 1951              		.loc 1 52 0
 1952 0208 10309FE5 		ldr	r3, .L11
 1953 020c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  53:../src/lcd.c  **** }
 1954              		.loc 1 53 0
 1955 0210 0300A0E1 		mov	r0, r3
 1956 0214 0CD04BE2 		sub	sp, fp, #12
 1957 0218 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1958 021c 1EFF2FE1 		bx	lr
 1959              	.L12:
 1960              		.align	2
 1961              	.L11:
 1962 0220 00960000 		.word	state
 1963              		.cfi_endproc
 1964              	.LFE3:
 1966              		.align	2
 1967              		.global	lcd_clear
 1969              	lcd_clear:
 1970              	.LFB4:
  54:../src/lcd.c  **** 
  55:../src/lcd.c  **** void lcd_clear( void )
  56:../src/lcd.c  **** {
 1971              		.loc 1 56 0
 1972              		.cfi_startproc
 1973              		@ Function supports interworking.
 1974              		@ args = 0, pretend = 0, frame = 8
 1975              		@ frame_needed = 1, uses_anonymous_args = 0
 1976 0224 0DC0A0E1 		mov	ip, sp
 1977              	.LCFI8:
 1978              		.cfi_def_cfa_register 12
 1979 0228 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1980 022c 04B04CE2 		sub	fp, ip, #4
 1981              		.cfi_offset 14, -8
 1982              		.cfi_offset 13, -12
 1983              		.cfi_offset 11, -16
 1984              	.LCFI9:
 1985              		.cfi_def_cfa 11, 4
 1986 0230 08D04DE2 		sub	sp, sp, #8
  57:../src/lcd.c  **** 	int i=0;
 1987              		.loc 1 57 0
 1988 0234 0030A0E3 		mov	r3, #0
 1989 0238 10300BE5 		str	r3, [fp, #-16]
  58:../src/lcd.c  ****     for(;i< (LCD_WIDTH * LCD_HEIGHT /2);i++){
 1990              		.loc 1 58 0
 1991 023c 070000EA 		b	.L14
 1992              	.L15:
  59:../src/lcd.c  ****      lcd_buffer[i] = 0;
 1993              		.loc 1 59 0 discriminator 2
 1994 0240 34209FE5 		ldr	r2, .L16
 1995 0244 10301BE5 		ldr	r3, [fp, #-16]
 1996 0248 033082E0 		add	r3, r2, r3
 1997 024c 0020A0E3 		mov	r2, #0
 1998 0250 0020C3E5 		strb	r2, [r3, #0]
  58:../src/lcd.c  ****     for(;i< (LCD_WIDTH * LCD_HEIGHT /2);i++){
 1999              		.loc 1 58 0 discriminator 2
 2000 0254 10301BE5 		ldr	r3, [fp, #-16]
 2001 0258 013083E2 		add	r3, r3, #1
 2002 025c 10300BE5 		str	r3, [fp, #-16]
 2003              	.L14:
  58:../src/lcd.c  ****     for(;i< (LCD_WIDTH * LCD_HEIGHT /2);i++){
 2004              		.loc 1 58 0 is_stmt 0 discriminator 1
 2005 0260 10201BE5 		ldr	r2, [fp, #-16]
 2006 0264 14309FE5 		ldr	r3, .L16+4
 2007 0268 030052E1 		cmp	r2, r3
 2008 026c F3FFFFDA 		ble	.L15
  60:../src/lcd.c  ****     }
  61:../src/lcd.c  **** }
 2009              		.loc 1 61 0 is_stmt 1
 2010 0270 0CD04BE2 		sub	sp, fp, #12
 2011 0274 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2012 0278 1EFF2FE1 		bx	lr
 2013              	.L17:
 2014              		.align	2
 2015              	.L16:
 2016 027c 00000000 		.word	lcd_buffer
 2017 0280 FF950000 		.word	38399
 2018              		.cfi_endproc
 2019              	.LFE4:
 2021              		.align	2
 2022              		.global	lcd_putpixel
 2024              	lcd_putpixel:
 2025              	.LFB5:
  62:../src/lcd.c  **** 
  63:../src/lcd.c  **** void lcd_putpixel( uint16 x, uint16 y, uint8 c)
  64:../src/lcd.c  **** {
 2026              		.loc 1 64 0
 2027              		.cfi_startproc
 2028              		@ Function supports interworking.
 2029              		@ args = 0, pretend = 0, frame = 16
 2030              		@ frame_needed = 1, uses_anonymous_args = 0
 2031 0284 0DC0A0E1 		mov	ip, sp
 2032              	.LCFI10:
 2033              		.cfi_def_cfa_register 12
 2034 0288 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2035 028c 04B04CE2 		sub	fp, ip, #4
 2036              		.cfi_offset 14, -8
 2037              		.cfi_offset 13, -12
 2038              		.cfi_offset 11, -16
 2039              	.LCFI11:
 2040              		.cfi_def_cfa 11, 4
 2041 0290 10D04DE2 		sub	sp, sp, #16
 2042 0294 0230A0E1 		mov	r3, r2
 2043 0298 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2044 029c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2045 02a0 19304BE5 		strb	r3, [fp, #-25]
  65:../src/lcd.c  ****     uint8 byte, bit;
  66:../src/lcd.c  ****     uint16 i;
  67:../src/lcd.c  **** 
  68:../src/lcd.c  ****     i = x/2 + y*(LCD_WIDTH/2);
 2046              		.loc 1 68 0
 2047 02a4 B6315BE1 		ldrh	r3, [fp, #-22]
 2048 02a8 A330A0E1 		mov	r3, r3, lsr #1
 2049 02ac 0338A0E1 		mov	r3, r3, asl #16
 2050 02b0 2328A0E1 		mov	r2, r3, lsr #16
 2051 02b4 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2052 02b8 0310A0E1 		mov	r1, r3	@ movhi
 2053 02bc 0111A0E1 		mov	r1, r1, asl #2
 2054 02c0 033081E0 		add	r3, r1, r3
 2055 02c4 8332A0E1 		mov	r3, r3, asl #5
 2056 02c8 0338A0E1 		mov	r3, r3, asl #16
 2057 02cc 2338A0E1 		mov	r3, r3, lsr #16
 2058 02d0 033082E0 		add	r3, r2, r3
 2059 02d4 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  69:../src/lcd.c  ****     bit = (1-x%2)*4;
 2060              		.loc 1 69 0
 2061 02d8 B6315BE1 		ldrh	r3, [fp, #-22]
 2062 02dc 013003E2 		and	r3, r3, #1
 2063 02e0 000053E3 		cmp	r3, #0
 2064 02e4 0100001A 		bne	.L19
 2065              		.loc 1 69 0 is_stmt 0 discriminator 1
 2066 02e8 0430A0E3 		mov	r3, #4
 2067 02ec 000000EA 		b	.L20
 2068              	.L19:
 2069              		.loc 1 69 0 discriminator 2
 2070 02f0 0030A0E3 		mov	r3, #0
 2071              	.L20:
 2072              		.loc 1 69 0 discriminator 3
 2073 02f4 0F304BE5 		strb	r3, [fp, #-15]
  70:../src/lcd.c  ****     
  71:../src/lcd.c  ****     byte = lcd_buffer[i];
 2074              		.loc 1 71 0 is_stmt 1 discriminator 3
 2075 02f8 BE305BE1 		ldrh	r3, [fp, #-14]
 2076 02fc 68209FE5 		ldr	r2, .L21
 2077 0300 0330D2E7 		ldrb	r3, [r2, r3]
 2078 0304 10304BE5 		strb	r3, [fp, #-16]
  72:../src/lcd.c  ****     byte &= ~(0xF << bit);
 2079              		.loc 1 72 0 discriminator 3
 2080 0308 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2081 030c 0F20A0E3 		mov	r2, #15
 2082 0310 1233A0E1 		mov	r3, r2, asl r3
 2083 0314 FF3003E2 		and	r3, r3, #255
 2084 0318 0330E0E1 		mvn	r3, r3
 2085 031c FF2003E2 		and	r2, r3, #255
 2086 0320 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2087 0324 033002E0 		and	r3, r2, r3
 2088 0328 FF3003E2 		and	r3, r3, #255
 2089 032c 10304BE5 		strb	r3, [fp, #-16]
  73:../src/lcd.c  ****     byte |= c << bit;
 2090              		.loc 1 73 0 discriminator 3
 2091 0330 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2092 0334 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2093 0338 1233A0E1 		mov	r3, r2, asl r3
 2094 033c FF2003E2 		and	r2, r3, #255
 2095 0340 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2096 0344 033082E1 		orr	r3, r2, r3
 2097 0348 FF3003E2 		and	r3, r3, #255
 2098 034c 10304BE5 		strb	r3, [fp, #-16]
  74:../src/lcd.c  ****     lcd_buffer[i] = byte;
 2099              		.loc 1 74 0 discriminator 3
 2100 0350 BE305BE1 		ldrh	r3, [fp, #-14]
 2101 0354 10209FE5 		ldr	r2, .L21
 2102 0358 10105BE5 		ldrb	r1, [fp, #-16]
 2103 035c 0310C2E7 		strb	r1, [r2, r3]
  75:../src/lcd.c  **** }
 2104              		.loc 1 75 0 discriminator 3
 2105 0360 0CD04BE2 		sub	sp, fp, #12
 2106 0364 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2107 0368 1EFF2FE1 		bx	lr
 2108              	.L22:
 2109              		.align	2
 2110              	.L21:
 2111 036c 00000000 		.word	lcd_buffer
 2112              		.cfi_endproc
 2113              	.LFE5:
 2115              		.align	2
 2116              		.global	lcd_getpixel
 2118              	lcd_getpixel:
 2119              	.LFB6:
  76:../src/lcd.c  **** 
  77:../src/lcd.c  **** uint8 lcd_getpixel( uint16 x, uint16 y )
  78:../src/lcd.c  **** {
 2120              		.loc 1 78 0
 2121              		.cfi_startproc
 2122              		@ Function supports interworking.
 2123              		@ args = 0, pretend = 0, frame = 16
 2124              		@ frame_needed = 1, uses_anonymous_args = 0
 2125 0370 0DC0A0E1 		mov	ip, sp
 2126              	.LCFI12:
 2127              		.cfi_def_cfa_register 12
 2128 0374 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2129 0378 04B04CE2 		sub	fp, ip, #4
 2130              		.cfi_offset 14, -8
 2131              		.cfi_offset 13, -12
 2132              		.cfi_offset 11, -16
 2133              	.LCFI13:
 2134              		.cfi_def_cfa 11, 4
 2135 037c 10D04DE2 		sub	sp, sp, #16
 2136 0380 0020A0E1 		mov	r2, r0
 2137 0384 0130A0E1 		mov	r3, r1
 2138 0388 B6214BE1 		strh	r2, [fp, #-22]	@ movhi
 2139 038c B8314BE1 		strh	r3, [fp, #-24]	@ movhi
  79:../src/lcd.c  ****     uint8 byte, bit,aux;
  80:../src/lcd.c  ****     uint16 i;
  81:../src/lcd.c  **** 
  82:../src/lcd.c  ****     i = x/2 + y*(LCD_WIDTH/2);
 2140              		.loc 1 82 0
 2141 0390 B6315BE1 		ldrh	r3, [fp, #-22]
 2142 0394 A330A0E1 		mov	r3, r3, lsr #1
 2143 0398 0338A0E1 		mov	r3, r3, asl #16
 2144 039c 2328A0E1 		mov	r2, r3, lsr #16
 2145 03a0 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2146 03a4 0310A0E1 		mov	r1, r3	@ movhi
 2147 03a8 0111A0E1 		mov	r1, r1, asl #2
 2148 03ac 033081E0 		add	r3, r1, r3
 2149 03b0 8332A0E1 		mov	r3, r3, asl #5
 2150 03b4 0338A0E1 		mov	r3, r3, asl #16
 2151 03b8 2338A0E1 		mov	r3, r3, lsr #16
 2152 03bc 033082E0 		add	r3, r2, r3
 2153 03c0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  83:../src/lcd.c  ****     bit = (1-x%2)*4;
 2154              		.loc 1 83 0
 2155 03c4 B6315BE1 		ldrh	r3, [fp, #-22]
 2156 03c8 013003E2 		and	r3, r3, #1
 2157 03cc 000053E3 		cmp	r3, #0
 2158 03d0 0100001A 		bne	.L24
 2159              		.loc 1 83 0 is_stmt 0 discriminator 1
 2160 03d4 0430A0E3 		mov	r3, #4
 2161 03d8 000000EA 		b	.L25
 2162              	.L24:
 2163              		.loc 1 83 0 discriminator 2
 2164 03dc 0030A0E3 		mov	r3, #0
 2165              	.L25:
 2166              		.loc 1 83 0 discriminator 3
 2167 03e0 0F304BE5 		strb	r3, [fp, #-15]
  84:../src/lcd.c  ****     byte = lcd_buffer[i];
 2168              		.loc 1 84 0 is_stmt 1 discriminator 3
 2169 03e4 BE305BE1 		ldrh	r3, [fp, #-14]
 2170 03e8 48209FE5 		ldr	r2, .L26
 2171 03ec 0330D2E7 		ldrb	r3, [r2, r3]
 2172 03f0 10304BE5 		strb	r3, [fp, #-16]
  85:../src/lcd.c  ****     aux = (byte >> bit);
 2173              		.loc 1 85 0 discriminator 3
 2174 03f4 10205BE5 		ldrb	r2, [fp, #-16]	@ zero_extendqisi2
 2175 03f8 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2176 03fc 5233A0E1 		mov	r3, r2, asr r3
 2177 0400 11304BE5 		strb	r3, [fp, #-17]
  86:../src/lcd.c  ****     aux &= 0xF << bit;
 2178              		.loc 1 86 0 discriminator 3
 2179 0404 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2180 0408 0F20A0E3 		mov	r2, #15
 2181 040c 1233A0E1 		mov	r3, r2, asl r3
 2182 0410 FF2003E2 		and	r2, r3, #255
 2183 0414 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2184 0418 033002E0 		and	r3, r2, r3
 2185 041c FF3003E2 		and	r3, r3, #255
 2186 0420 11304BE5 		strb	r3, [fp, #-17]
  87:../src/lcd.c  ****     return aux;
 2187              		.loc 1 87 0 discriminator 3
 2188 0424 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
  88:../src/lcd.c  **** }
 2189              		.loc 1 88 0 discriminator 3
 2190 0428 0300A0E1 		mov	r0, r3
 2191 042c 0CD04BE2 		sub	sp, fp, #12
 2192 0430 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2193 0434 1EFF2FE1 		bx	lr
 2194              	.L27:
 2195              		.align	2
 2196              	.L26:
 2197 0438 00000000 		.word	lcd_buffer
 2198              		.cfi_endproc
 2199              	.LFE6:
 2201              		.align	2
 2202              		.global	lcd_draw_hline
 2204              	lcd_draw_hline:
 2205              	.LFB7:
  89:../src/lcd.c  **** 
  90:../src/lcd.c  **** void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
  91:../src/lcd.c  **** {	//hay que llamar a putpixel, pero no se si esta bien asi
 2206              		.loc 1 91 0
 2207              		.cfi_startproc
 2208              		@ Function supports interworking.
 2209              		@ args = 4, pretend = 0, frame = 16
 2210              		@ frame_needed = 1, uses_anonymous_args = 0
 2211 043c 0DC0A0E1 		mov	ip, sp
 2212              	.LCFI14:
 2213              		.cfi_def_cfa_register 12
 2214 0440 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2215 0444 04B04CE2 		sub	fp, ip, #4
 2216              		.cfi_offset 14, -8
 2217              		.cfi_offset 13, -12
 2218              		.cfi_offset 11, -16
 2219              	.LCFI15:
 2220              		.cfi_def_cfa 11, 4
 2221 0448 10D04DE2 		sub	sp, sp, #16
 2222 044c B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2223 0450 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2224 0454 BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2225 0458 1B304BE5 		strb	r3, [fp, #-27]
  92:../src/lcd.c  ****     //uint16 left, right;
  93:../src/lcd.c  ****     //uint8 byte;
  94:../src/lcd.c  ****     uint16 i,j;
  95:../src/lcd.c  ****     i = xleft;
 2226              		.loc 1 95 0
 2227 045c B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2228 0460 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  96:../src/lcd.c  **** //    left = xleft/2 + y*(LCD_WIDTH/2);
  97:../src/lcd.c  **** //    right =  xright/2 + y*(LCD_WIDTH/2);
  98:../src/lcd.c  **** 
  99:../src/lcd.c  ****     for(j=y;j<y+width; j++){
 2229              		.loc 1 99 0
 2230 0464 BA315BE1 		ldrh	r3, [fp, #-26]	@ movhi
 2231 0468 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2232 046c 130000EA 		b	.L29
 2233              	.L32:
 100:../src/lcd.c  ****     	i = xleft;
 2234              		.loc 1 100 0
 2235 0470 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2236 0474 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 101:../src/lcd.c  ****     	//right = right +(j*(LCD_WIDTH/2));
 102:../src/lcd.c  ****     	for(; i<xright;i++){
 2237              		.loc 1 102 0
 2238 0478 090000EA 		b	.L30
 2239              	.L31:
 103:../src/lcd.c  ****     		//lcd_buffer[i] = color |(color << 4);
 104:../src/lcd.c  ****     		lcd_putpixel(i,j,color);
 2240              		.loc 1 104 0 discriminator 2
 2241 047c BE105BE1 		ldrh	r1, [fp, #-14]
 2242 0480 B0215BE1 		ldrh	r2, [fp, #-16]
 2243 0484 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2244 0488 0100A0E1 		mov	r0, r1
 2245 048c 0210A0E1 		mov	r1, r2
 2246 0490 0320A0E1 		mov	r2, r3
 2247 0494 FEFFFFEB 		bl	lcd_putpixel
 102:../src/lcd.c  ****     	for(; i<xright;i++){
 2248              		.loc 1 102 0 discriminator 2
 2249 0498 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2250 049c 013083E2 		add	r3, r3, #1
 2251 04a0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2252              	.L30:
 102:../src/lcd.c  ****     	for(; i<xright;i++){
 2253              		.loc 1 102 0 is_stmt 0 discriminator 1
 2254 04a4 BE205BE1 		ldrh	r2, [fp, #-14]
 2255 04a8 B8315BE1 		ldrh	r3, [fp, #-24]
 2256 04ac 030052E1 		cmp	r2, r3
 2257 04b0 F1FFFF3A 		bcc	.L31
  99:../src/lcd.c  ****     for(j=y;j<y+width; j++){
 2258              		.loc 1 99 0 is_stmt 1
 2259 04b4 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2260 04b8 013083E2 		add	r3, r3, #1
 2261 04bc B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2262              	.L29:
  99:../src/lcd.c  ****     for(j=y;j<y+width; j++){
 2263              		.loc 1 99 0 is_stmt 0 discriminator 1
 2264 04c0 B0215BE1 		ldrh	r2, [fp, #-16]
 2265 04c4 BA115BE1 		ldrh	r1, [fp, #-26]
 2266 04c8 B430DBE1 		ldrh	r3, [fp, #4]
 2267 04cc 033081E0 		add	r3, r1, r3
 2268 04d0 030052E1 		cmp	r2, r3
 2269 04d4 E5FFFFBA 		blt	.L32
 105:../src/lcd.c  ****     	}
 106:../src/lcd.c  ****     }
 107:../src/lcd.c  **** }
 2270              		.loc 1 107 0 is_stmt 1
 2271 04d8 0CD04BE2 		sub	sp, fp, #12
 2272 04dc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2273 04e0 1EFF2FE1 		bx	lr
 2274              		.cfi_endproc
 2275              	.LFE7:
 2277              		.align	2
 2278              		.global	lcd_draw_vline
 2280              	lcd_draw_vline:
 2281              	.LFB8:
 108:../src/lcd.c  **** 
 109:../src/lcd.c  **** void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
 110:../src/lcd.c  **** {	//hay que llamar a putpixel, pero no se si esta bien asi
 2282              		.loc 1 110 0
 2283              		.cfi_startproc
 2284              		@ Function supports interworking.
 2285              		@ args = 4, pretend = 0, frame = 16
 2286              		@ frame_needed = 1, uses_anonymous_args = 0
 2287 04e4 0DC0A0E1 		mov	ip, sp
 2288              	.LCFI16:
 2289              		.cfi_def_cfa_register 12
 2290 04e8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2291 04ec 04B04CE2 		sub	fp, ip, #4
 2292              		.cfi_offset 14, -8
 2293              		.cfi_offset 13, -12
 2294              		.cfi_offset 11, -16
 2295              	.LCFI17:
 2296              		.cfi_def_cfa 11, 4
 2297 04f0 10D04DE2 		sub	sp, sp, #16
 2298 04f4 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2299 04f8 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2300 04fc BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2301 0500 1B304BE5 		strb	r3, [fp, #-27]
 111:../src/lcd.c  **** 
 112:../src/lcd.c  ****   //  uint16 left, right;
 113:../src/lcd.c  ****     //uint8 byte;
 114:../src/lcd.c  ****     uint16 i,j;
 115:../src/lcd.c  **** 
 116:../src/lcd.c  ****     i = x;
 2302              		.loc 1 116 0
 2303 0504 BA315BE1 		ldrh	r3, [fp, #-26]	@ movhi
 2304 0508 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 117:../src/lcd.c  **** 
 118:../src/lcd.c  ****  //   left = x/2 + yup*(LCD_WIDTH/2);
 119:../src/lcd.c  ****  //   right =  x/2 + yup*(LCD_WIDTH/2)+(width /2);
 120:../src/lcd.c  **** 
 121:../src/lcd.c  ****     for(j=yup;j<ydown; j++){
 2305              		.loc 1 121 0
 2306 050c B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2307 0510 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2308 0514 150000EA 		b	.L34
 2309              	.L37:
 122:../src/lcd.c  ****     	i = x;
 2310              		.loc 1 122 0
 2311 0518 BA315BE1 		ldrh	r3, [fp, #-26]	@ movhi
 2312 051c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 123:../src/lcd.c  ****     	for(; i<(x+width);i++){
 2313              		.loc 1 123 0
 2314 0520 090000EA 		b	.L35
 2315              	.L36:
 124:../src/lcd.c  ****     		lcd_putpixel(i,j,color);//rellenaria los 2 pixels???
 2316              		.loc 1 124 0 discriminator 2
 2317 0524 BE105BE1 		ldrh	r1, [fp, #-14]
 2318 0528 B0215BE1 		ldrh	r2, [fp, #-16]
 2319 052c 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2320 0530 0100A0E1 		mov	r0, r1
 2321 0534 0210A0E1 		mov	r1, r2
 2322 0538 0320A0E1 		mov	r2, r3
 2323 053c FEFFFFEB 		bl	lcd_putpixel
 123:../src/lcd.c  ****     	for(; i<(x+width);i++){
 2324              		.loc 1 123 0 discriminator 2
 2325 0540 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2326 0544 013083E2 		add	r3, r3, #1
 2327 0548 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2328              	.L35:
 123:../src/lcd.c  ****     	for(; i<(x+width);i++){
 2329              		.loc 1 123 0 is_stmt 0 discriminator 1
 2330 054c BE205BE1 		ldrh	r2, [fp, #-14]
 2331 0550 BA115BE1 		ldrh	r1, [fp, #-26]
 2332 0554 B430DBE1 		ldrh	r3, [fp, #4]
 2333 0558 033081E0 		add	r3, r1, r3
 2334 055c 030052E1 		cmp	r2, r3
 2335 0560 EFFFFFBA 		blt	.L36
 121:../src/lcd.c  ****     for(j=yup;j<ydown; j++){
 2336              		.loc 1 121 0 is_stmt 1
 2337 0564 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2338 0568 013083E2 		add	r3, r3, #1
 2339 056c B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2340              	.L34:
 121:../src/lcd.c  ****     for(j=yup;j<ydown; j++){
 2341              		.loc 1 121 0 is_stmt 0 discriminator 1
 2342 0570 B0215BE1 		ldrh	r2, [fp, #-16]
 2343 0574 B8315BE1 		ldrh	r3, [fp, #-24]
 2344 0578 030052E1 		cmp	r2, r3
 2345 057c E5FFFF3A 		bcc	.L37
 125:../src/lcd.c  ****     	}
 126:../src/lcd.c  **** 
 127:../src/lcd.c  ****     }
 128:../src/lcd.c  **** }
 2346              		.loc 1 128 0 is_stmt 1
 2347 0580 0CD04BE2 		sub	sp, fp, #12
 2348 0584 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2349 0588 1EFF2FE1 		bx	lr
 2350              		.cfi_endproc
 2351              	.LFE8:
 2353              		.align	2
 2354              		.global	lcd_draw_box
 2356              	lcd_draw_box:
 2357              	.LFB9:
 129:../src/lcd.c  **** 
 130:../src/lcd.c  **** void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width
 131:../src/lcd.c  **** {
 2358              		.loc 1 131 0
 2359              		.cfi_startproc
 2360              		@ Function supports interworking.
 2361              		@ args = 8, pretend = 0, frame = 8
 2362              		@ frame_needed = 1, uses_anonymous_args = 0
 2363 058c 0DC0A0E1 		mov	ip, sp
 2364              	.LCFI18:
 2365              		.cfi_def_cfa_register 12
 2366 0590 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2367 0594 04B04CE2 		sub	fp, ip, #4
 2368              		.cfi_offset 14, -8
 2369              		.cfi_offset 13, -12
 2370              		.cfi_offset 11, -16
 2371              	.LCFI19:
 2372              		.cfi_def_cfa 11, 4
 2373 0598 10D04DE2 		sub	sp, sp, #16
 2374 059c BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2375 05a0 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2376 05a4 B2214BE1 		strh	r2, [fp, #-18]	@ movhi
 2377 05a8 B4314BE1 		strh	r3, [fp, #-20]	@ movhi
 132:../src/lcd.c  **** 	lcd_draw_hline(xleft,xright,yup,color,width);
 2378              		.loc 1 132 0
 2379 05ac BE005BE1 		ldrh	r0, [fp, #-14]
 2380 05b0 B2115BE1 		ldrh	r1, [fp, #-18]
 2381 05b4 B0215BE1 		ldrh	r2, [fp, #-16]
 2382 05b8 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2383 05bc B8C0DBE1 		ldrh	ip, [fp, #8]
 2384 05c0 00C08DE5 		str	ip, [sp, #0]
 2385 05c4 FEFFFFEB 		bl	lcd_draw_hline
 133:../src/lcd.c  **** 	lcd_draw_hline(xleft,xright + width,ydown,color,width);
 2386              		.loc 1 133 0
 2387 05c8 B2215BE1 		ldrh	r2, [fp, #-18]	@ movhi
 2388 05cc B830DBE1 		ldrh	r3, [fp, #8]	@ movhi
 2389 05d0 033082E0 		add	r3, r2, r3
 2390 05d4 0338A0E1 		mov	r3, r3, asl #16
 2391 05d8 2318A0E1 		mov	r1, r3, lsr #16
 2392 05dc BE005BE1 		ldrh	r0, [fp, #-14]
 2393 05e0 B4215BE1 		ldrh	r2, [fp, #-20]
 2394 05e4 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2395 05e8 B8C0DBE1 		ldrh	ip, [fp, #8]
 2396 05ec 00C08DE5 		str	ip, [sp, #0]
 2397 05f0 FEFFFFEB 		bl	lcd_draw_hline
 134:../src/lcd.c  **** 	lcd_draw_vline(yup, ydown, xleft, color, width);
 2398              		.loc 1 134 0
 2399 05f4 B0015BE1 		ldrh	r0, [fp, #-16]
 2400 05f8 B4115BE1 		ldrh	r1, [fp, #-20]
 2401 05fc BE205BE1 		ldrh	r2, [fp, #-14]
 2402 0600 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2403 0604 B8C0DBE1 		ldrh	ip, [fp, #8]
 2404 0608 00C08DE5 		str	ip, [sp, #0]
 2405 060c FEFFFFEB 		bl	lcd_draw_vline
 135:../src/lcd.c  **** 	lcd_draw_vline(yup, ydown, xright, color, width);
 2406              		.loc 1 135 0
 2407 0610 B0015BE1 		ldrh	r0, [fp, #-16]
 2408 0614 B4115BE1 		ldrh	r1, [fp, #-20]
 2409 0618 B2215BE1 		ldrh	r2, [fp, #-18]
 2410 061c 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2411 0620 B8C0DBE1 		ldrh	ip, [fp, #8]
 2412 0624 00C08DE5 		str	ip, [sp, #0]
 2413 0628 FEFFFFEB 		bl	lcd_draw_vline
 136:../src/lcd.c  **** }
 2414              		.loc 1 136 0
 2415 062c 0CD04BE2 		sub	sp, fp, #12
 2416 0630 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2417 0634 1EFF2FE1 		bx	lr
 2418              		.cfi_endproc
 2419              	.LFE9:
 2421              		.align	2
 2422              		.global	lcd_putchar
 2424              	lcd_putchar:
 2425              	.LFB10:
 137:../src/lcd.c  **** 
 138:../src/lcd.c  **** void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
 139:../src/lcd.c  **** {
 2426              		.loc 1 139 0
 2427              		.cfi_startproc
 2428              		@ Function supports interworking.
 2429              		@ args = 0, pretend = 0, frame = 16
 2430              		@ frame_needed = 1, uses_anonymous_args = 0
 2431 0638 0DC0A0E1 		mov	ip, sp
 2432              	.LCFI20:
 2433              		.cfi_def_cfa_register 12
 2434 063c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2435 0640 04B04CE2 		sub	fp, ip, #4
 2436              		.cfi_offset 14, -8
 2437              		.cfi_offset 13, -12
 2438              		.cfi_offset 11, -16
 2439              	.LCFI21:
 2440              		.cfi_def_cfa 11, 4
 2441 0644 10D04DE2 		sub	sp, sp, #16
 2442 0648 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2443 064c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2444 0650 19204BE5 		strb	r2, [fp, #-25]
 2445 0654 1A304BE5 		strb	r3, [fp, #-26]
 140:../src/lcd.c  ****     uint8 line, row;
 141:../src/lcd.c  ****     uint8 *bitmap;
 142:../src/lcd.c  **** 
 143:../src/lcd.c  ****     bitmap = font + ch*16;
 2446              		.loc 1 143 0
 2447 0658 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2448 065c 0332A0E1 		mov	r3, r3, asl #4
 2449 0660 0320A0E1 		mov	r2, r3
 2450 0664 1C319FE5 		ldr	r3, .L46
 2451 0668 033082E0 		add	r3, r2, r3
 2452 066c 14300BE5 		str	r3, [fp, #-20]
 144:../src/lcd.c  ****     for( line=0; line<16; line++ )
 2453              		.loc 1 144 0
 2454 0670 0030A0E3 		mov	r3, #0
 2455 0674 0D304BE5 		strb	r3, [fp, #-13]
 2456 0678 3C0000EA 		b	.L40
 2457              	.L45:
 145:../src/lcd.c  ****         for( row=0; row<8; row++ )                    
 2458              		.loc 1 145 0
 2459 067c 0030A0E3 		mov	r3, #0
 2460 0680 0E304BE5 		strb	r3, [fp, #-14]
 2461 0684 330000EA 		b	.L41
 2462              	.L44:
 146:../src/lcd.c  ****             if( bitmap[line] & (0x80 >> row) )
 2463              		.loc 1 146 0
 2464 0688 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2465 068c 14201BE5 		ldr	r2, [fp, #-20]
 2466 0690 033082E0 		add	r3, r2, r3
 2467 0694 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2468 0698 0320A0E1 		mov	r2, r3
 2469 069c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2470 06a0 8010A0E3 		mov	r1, #128
 2471 06a4 5133A0E1 		mov	r3, r1, asr r3
 2472 06a8 033002E0 		and	r3, r2, r3
 2473 06ac 000053E3 		cmp	r3, #0
 2474 06b0 1300000A 		beq	.L42
 147:../src/lcd.c  ****                 lcd_putpixel( x+row, y+line, color );
 2475              		.loc 1 147 0
 2476 06b4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2477 06b8 0338A0E1 		mov	r3, r3, asl #16
 2478 06bc 2328A0E1 		mov	r2, r3, lsr #16
 2479 06c0 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2480 06c4 033082E0 		add	r3, r2, r3
 2481 06c8 0338A0E1 		mov	r3, r3, asl #16
 2482 06cc 2318A0E1 		mov	r1, r3, lsr #16
 2483 06d0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2484 06d4 0338A0E1 		mov	r3, r3, asl #16
 2485 06d8 2328A0E1 		mov	r2, r3, lsr #16
 2486 06dc B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2487 06e0 033082E0 		add	r3, r2, r3
 2488 06e4 0338A0E1 		mov	r3, r3, asl #16
 2489 06e8 2328A0E1 		mov	r2, r3, lsr #16
 2490 06ec 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2491 06f0 0100A0E1 		mov	r0, r1
 2492 06f4 0210A0E1 		mov	r1, r2
 2493 06f8 0320A0E1 		mov	r2, r3
 2494 06fc FEFFFFEB 		bl	lcd_putpixel
 2495 0700 110000EA 		b	.L43
 2496              	.L42:
 148:../src/lcd.c  ****             else
 149:../src/lcd.c  ****                 lcd_putpixel( x+row, y+line, WHITE );
 2497              		.loc 1 149 0
 2498 0704 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2499 0708 0338A0E1 		mov	r3, r3, asl #16
 2500 070c 2328A0E1 		mov	r2, r3, lsr #16
 2501 0710 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2502 0714 033082E0 		add	r3, r2, r3
 2503 0718 0338A0E1 		mov	r3, r3, asl #16
 2504 071c 2328A0E1 		mov	r2, r3, lsr #16
 2505 0720 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2506 0724 0338A0E1 		mov	r3, r3, asl #16
 2507 0728 2318A0E1 		mov	r1, r3, lsr #16
 2508 072c B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2509 0730 033081E0 		add	r3, r1, r3
 2510 0734 0338A0E1 		mov	r3, r3, asl #16
 2511 0738 2338A0E1 		mov	r3, r3, lsr #16
 2512 073c 0200A0E1 		mov	r0, r2
 2513 0740 0310A0E1 		mov	r1, r3
 2514 0744 0020A0E3 		mov	r2, #0
 2515 0748 FEFFFFEB 		bl	lcd_putpixel
 2516              	.L43:
 145:../src/lcd.c  ****         for( row=0; row<8; row++ )                    
 2517              		.loc 1 145 0
 2518 074c 0E305BE5 		ldrb	r3, [fp, #-14]
 2519 0750 013083E2 		add	r3, r3, #1
 2520 0754 0E304BE5 		strb	r3, [fp, #-14]
 2521              	.L41:
 145:../src/lcd.c  ****         for( row=0; row<8; row++ )                    
 2522              		.loc 1 145 0 is_stmt 0 discriminator 1
 2523 0758 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2524 075c 070053E3 		cmp	r3, #7
 2525 0760 C8FFFF9A 		bls	.L44
 144:../src/lcd.c  ****     for( line=0; line<16; line++ )
 2526              		.loc 1 144 0 is_stmt 1
 2527 0764 0D305BE5 		ldrb	r3, [fp, #-13]
 2528 0768 013083E2 		add	r3, r3, #1
 2529 076c 0D304BE5 		strb	r3, [fp, #-13]
 2530              	.L40:
 144:../src/lcd.c  ****     for( line=0; line<16; line++ )
 2531              		.loc 1 144 0 is_stmt 0 discriminator 1
 2532 0770 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2533 0774 0F0053E3 		cmp	r3, #15
 2534 0778 BFFFFF9A 		bls	.L45
 150:../src/lcd.c  **** }
 2535              		.loc 1 150 0 is_stmt 1
 2536 077c 0CD04BE2 		sub	sp, fp, #12
 2537 0780 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2538 0784 1EFF2FE1 		bx	lr
 2539              	.L47:
 2540              		.align	2
 2541              	.L46:
 2542 0788 00000000 		.word	font
 2543              		.cfi_endproc
 2544              	.LFE10:
 2546              		.align	2
 2547              		.global	lcd_puts
 2549              	lcd_puts:
 2550              	.LFB11:
 151:../src/lcd.c  **** 
 152:../src/lcd.c  **** void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
 153:../src/lcd.c  **** {
 2551              		.loc 1 153 0
 2552              		.cfi_startproc
 2553              		@ Function supports interworking.
 2554              		@ args = 0, pretend = 0, frame = 24
 2555              		@ frame_needed = 1, uses_anonymous_args = 0
 2556 078c 0DC0A0E1 		mov	ip, sp
 2557              	.LCFI22:
 2558              		.cfi_def_cfa_register 12
 2559 0790 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2560 0794 04B04CE2 		sub	fp, ip, #4
 2561              		.cfi_offset 14, -8
 2562              		.cfi_offset 13, -12
 2563              		.cfi_offset 11, -16
 2564              	.LCFI23:
 2565              		.cfi_def_cfa 11, 4
 2566 0798 18D04DE2 		sub	sp, sp, #24
 2567 079c 20300BE5 		str	r3, [fp, #-32]
 2568 07a0 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2569 07a4 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2570 07a8 0230A0E1 		mov	r3, r2
 2571 07ac 19304BE5 		strb	r3, [fp, #-25]
 154:../src/lcd.c  **** 	int i =0;
 2572              		.loc 1 154 0
 2573 07b0 0030A0E3 		mov	r3, #0
 2574 07b4 10300BE5 		str	r3, [fp, #-16]
 155:../src/lcd.c  ****     while(s[i] != '\0'){
 2575              		.loc 1 155 0
 2576 07b8 0D0000EA 		b	.L49
 2577              	.L50:
 156:../src/lcd.c  ****     	lcd_putchar(x,y,color,s[i]);
 2578              		.loc 1 156 0
 2579 07bc 10301BE5 		ldr	r3, [fp, #-16]
 2580 07c0 20201BE5 		ldr	r2, [fp, #-32]
 2581 07c4 033082E0 		add	r3, r2, r3
 2582 07c8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2583 07cc B6015BE1 		ldrh	r0, [fp, #-22]
 2584 07d0 B8115BE1 		ldrh	r1, [fp, #-24]
 2585 07d4 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2586 07d8 FEFFFFEB 		bl	lcd_putchar
 157:../src/lcd.c  ****     	x += 8;
 2587              		.loc 1 157 0
 2588 07dc B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2589 07e0 083083E2 		add	r3, r3, #8
 2590 07e4 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
 158:../src/lcd.c  ****     	i++;
 2591              		.loc 1 158 0
 2592 07e8 10301BE5 		ldr	r3, [fp, #-16]
 2593 07ec 013083E2 		add	r3, r3, #1
 2594 07f0 10300BE5 		str	r3, [fp, #-16]
 2595              	.L49:
 155:../src/lcd.c  ****     while(s[i] != '\0'){
 2596              		.loc 1 155 0 discriminator 1
 2597 07f4 10301BE5 		ldr	r3, [fp, #-16]
 2598 07f8 20201BE5 		ldr	r2, [fp, #-32]
 2599 07fc 033082E0 		add	r3, r2, r3
 2600 0800 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2601 0804 000053E3 		cmp	r3, #0
 2602 0808 EBFFFF1A 		bne	.L50
 159:../src/lcd.c  ****     }
 160:../src/lcd.c  **** }
 2603              		.loc 1 160 0
 2604 080c 0CD04BE2 		sub	sp, fp, #12
 2605 0810 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2606 0814 1EFF2FE1 		bx	lr
 2607              		.cfi_endproc
 2608              	.LFE11:
 2610              		.align	2
 2611              		.global	lcd_putint
 2613              	lcd_putint:
 2614              	.LFB12:
 161:../src/lcd.c  **** 
 162:../src/lcd.c  **** void lcd_putint( uint16 x, uint16 y, uint8 color, int32 i )
 163:../src/lcd.c  **** {
 2615              		.loc 1 163 0
 2616              		.cfi_startproc
 2617              		@ Function supports interworking.
 2618              		@ args = 0, pretend = 0, frame = 48
 2619              		@ frame_needed = 1, uses_anonymous_args = 0
 2620 0818 0DC0A0E1 		mov	ip, sp
 2621              	.LCFI24:
 2622              		.cfi_def_cfa_register 12
 2623 081c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2624 0820 04B04CE2 		sub	fp, ip, #4
 2625              		.cfi_offset 14, -8
 2626              		.cfi_offset 13, -12
 2627              		.cfi_offset 11, -16
 2628              	.LCFI25:
 2629              		.cfi_def_cfa 11, 4
 2630 0824 30D04DE2 		sub	sp, sp, #48
 2631 0828 38300BE5 		str	r3, [fp, #-56]
 2632 082c BE024BE1 		strh	r0, [fp, #-46]	@ movhi
 2633 0830 B0134BE1 		strh	r1, [fp, #-48]	@ movhi
 2634 0834 0230A0E1 		mov	r3, r2
 2635 0838 31304BE5 		strb	r3, [fp, #-49]
 164:../src/lcd.c  **** 	/*
 165:../src/lcd.c  ****     uint8 line, row;
 166:../src/lcd.c  ****     uint8 *bitmap;
 167:../src/lcd.c  **** 
 168:../src/lcd.c  ****     bitmap = font + i/2;//de int 32 a font que esta en 16???
 169:../src/lcd.c  ****     for( line=0; line<16; line++ )
 170:../src/lcd.c  ****         for( row=0; row<8; row++ )
 171:../src/lcd.c  ****             if( bitmap[line] & (0x80 >> row) )//probablemente haya que cambiar esta direccion
 172:../src/lcd.c  ****                 lcd_putpixel( x+row, y+line, color );
 173:../src/lcd.c  ****             else
 174:../src/lcd.c  ****                 lcd_putpixel( x+row, y+line, WHITE );
 175:../src/lcd.c  ****      */
 176:../src/lcd.c  **** 
 177:../src/lcd.c  **** 
 178:../src/lcd.c  **** 	char buf[20 + 1];
 179:../src/lcd.c  **** 	char *p = buf + 20;
 2636              		.loc 1 179 0
 2637 083c 28304BE2 		sub	r3, fp, #40
 2638 0840 143083E2 		add	r3, r3, #20
 2639 0844 10300BE5 		str	r3, [fp, #-16]
 180:../src/lcd.c  **** 	uint8 c;
 181:../src/lcd.c  **** 	if (i < 0){
 2640              		.loc 1 181 0
 2641 0848 38301BE5 		ldr	r3, [fp, #-56]
 2642 084c 000053E3 		cmp	r3, #0
 2643 0850 0D0000AA 		bge	.L52
 182:../src/lcd.c  **** 		lcd_putchar(x,y,color,'-');
 2644              		.loc 1 182 0
 2645 0854 BE125BE1 		ldrh	r1, [fp, #-46]
 2646 0858 B0235BE1 		ldrh	r2, [fp, #-48]
 2647 085c 31305BE5 		ldrb	r3, [fp, #-49]	@ zero_extendqisi2
 2648 0860 0100A0E1 		mov	r0, r1
 2649 0864 0210A0E1 		mov	r1, r2
 2650 0868 0320A0E1 		mov	r2, r3
 2651 086c 2D30A0E3 		mov	r3, #45
 2652 0870 FEFFFFEB 		bl	lcd_putchar
 183:../src/lcd.c  **** 		x=x+8;
 2653              		.loc 1 183 0
 2654 0874 BE325BE1 		ldrh	r3, [fp, #-46]	@ movhi
 2655 0878 083083E2 		add	r3, r3, #8
 2656 087c BE324BE1 		strh	r3, [fp, #-46]	@ movhi
 184:../src/lcd.c  **** 		i= i * -1;
 2657              		.loc 1 184 0
 2658 0880 38301BE5 		ldr	r3, [fp, #-56]
 2659 0884 003063E2 		rsb	r3, r3, #0
 2660 0888 38300BE5 		str	r3, [fp, #-56]
 2661              	.L52:
 185:../src/lcd.c  **** 	}
 186:../src/lcd.c  **** 	*p = '\0';
 2662              		.loc 1 186 0
 2663 088c 10301BE5 		ldr	r3, [fp, #-16]
 2664 0890 0020A0E3 		mov	r2, #0
 2665 0894 0020C3E5 		strb	r2, [r3, #0]
 2666              	.L53:
 187:../src/lcd.c  **** 
 188:../src/lcd.c  **** 	do {
 189:../src/lcd.c  **** 		c = i % 10;
 2667              		.loc 1 189 0 discriminator 1
 2668 0898 38101BE5 		ldr	r1, [fp, #-56]
 2669 089c 9C309FE5 		ldr	r3, .L54
 2670 08a0 9123C3E0 		smull	r2, r3, r1, r3
 2671 08a4 4321A0E1 		mov	r2, r3, asr #2
 2672 08a8 C13FA0E1 		mov	r3, r1, asr #31
 2673 08ac 022063E0 		rsb	r2, r3, r2
 2674 08b0 0230A0E1 		mov	r3, r2
 2675 08b4 0331A0E1 		mov	r3, r3, asl #2
 2676 08b8 023083E0 		add	r3, r3, r2
 2677 08bc 8330A0E1 		mov	r3, r3, asl #1
 2678 08c0 012063E0 		rsb	r2, r3, r1
 2679 08c4 0230A0E1 		mov	r3, r2
 2680 08c8 11304BE5 		strb	r3, [fp, #-17]
 190:../src/lcd.c  **** 		*--p = '0' + c;
 2681              		.loc 1 190 0 discriminator 1
 2682 08cc 10301BE5 		ldr	r3, [fp, #-16]
 2683 08d0 013043E2 		sub	r3, r3, #1
 2684 08d4 10300BE5 		str	r3, [fp, #-16]
 2685 08d8 11305BE5 		ldrb	r3, [fp, #-17]
 2686 08dc 303083E2 		add	r3, r3, #48
 2687 08e0 FF2003E2 		and	r2, r3, #255
 2688 08e4 10301BE5 		ldr	r3, [fp, #-16]
 2689 08e8 0020C3E5 		strb	r2, [r3, #0]
 191:../src/lcd.c  **** 		i = i /10;
 2690              		.loc 1 191 0 discriminator 1
 2691 08ec 38301BE5 		ldr	r3, [fp, #-56]
 2692 08f0 48209FE5 		ldr	r2, .L54
 2693 08f4 9312C2E0 		smull	r1, r2, r3, r2
 2694 08f8 4221A0E1 		mov	r2, r2, asr #2
 2695 08fc C33FA0E1 		mov	r3, r3, asr #31
 2696 0900 023063E0 		rsb	r3, r3, r2
 2697 0904 38300BE5 		str	r3, [fp, #-56]
 192:../src/lcd.c  **** 	} while( i );
 2698              		.loc 1 192 0 discriminator 1
 2699 0908 38301BE5 		ldr	r3, [fp, #-56]
 2700 090c 000053E3 		cmp	r3, #0
 2701 0910 E0FFFF1A 		bne	.L53
 193:../src/lcd.c  **** 	lcd_puts(x, y, color, p);
 2702              		.loc 1 193 0
 2703 0914 BE125BE1 		ldrh	r1, [fp, #-46]
 2704 0918 B0235BE1 		ldrh	r2, [fp, #-48]
 2705 091c 31305BE5 		ldrb	r3, [fp, #-49]	@ zero_extendqisi2
 2706 0920 0100A0E1 		mov	r0, r1
 2707 0924 0210A0E1 		mov	r1, r2
 2708 0928 0320A0E1 		mov	r2, r3
 2709 092c 10301BE5 		ldr	r3, [fp, #-16]
 2710 0930 FEFFFFEB 		bl	lcd_puts
 194:../src/lcd.c  **** }
 2711              		.loc 1 194 0
 2712 0934 0CD04BE2 		sub	sp, fp, #12
 2713 0938 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2714 093c 1EFF2FE1 		bx	lr
 2715              	.L55:
 2716              		.align	2
 2717              	.L54:
 2718 0940 67666666 		.word	1717986919
 2719              		.cfi_endproc
 2720              	.LFE12:
 2722              		.align	2
 2723              		.global	lcd_puthex
 2725              	lcd_puthex:
 2726              	.LFB13:
 195:../src/lcd.c  **** 
 196:../src/lcd.c  **** void lcd_puthex( uint16 x, uint16 y, uint8 color, uint32 i )
 197:../src/lcd.c  **** {
 2727              		.loc 1 197 0
 2728              		.cfi_startproc
 2729              		@ Function supports interworking.
 2730              		@ args = 0, pretend = 0, frame = 32
 2731              		@ frame_needed = 1, uses_anonymous_args = 0
 2732 0944 0DC0A0E1 		mov	ip, sp
 2733              	.LCFI26:
 2734              		.cfi_def_cfa_register 12
 2735 0948 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2736 094c 04B04CE2 		sub	fp, ip, #4
 2737              		.cfi_offset 14, -8
 2738              		.cfi_offset 13, -12
 2739              		.cfi_offset 11, -16
 2740              	.LCFI27:
 2741              		.cfi_def_cfa 11, 4
 2742 0950 20D04DE2 		sub	sp, sp, #32
 2743 0954 28300BE5 		str	r3, [fp, #-40]
 2744 0958 BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 2745 095c B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 2746 0960 0230A0E1 		mov	r3, r2
 2747 0964 21304BE5 		strb	r3, [fp, #-33]
 198:../src/lcd.c  **** 	/*
 199:../src/lcd.c  ****     uint8 line, row;
 200:../src/lcd.c  ****     uint8 *bitmap;
 201:../src/lcd.c  **** 
 202:../src/lcd.c  ****     bitmap = font + i/2;//de int 32 a font que esta en 16???
 203:../src/lcd.c  ****     for( line=0; line<16; line++ )
 204:../src/lcd.c  ****         for( row=0; row<8; row++ )
 205:../src/lcd.c  ****             if( bitmap[line] & (0x80 >> row) )//esta direccion tambien
 206:../src/lcd.c  ****                 lcd_putpixel( x+row, y+line, color );
 207:../src/lcd.c  ****             else
 208:../src/lcd.c  ****                 lcd_putpixel( x+row, y+line, WHITE );
 209:../src/lcd.c  ****                 */
 210:../src/lcd.c  **** 	char buf[8 + 1];
 211:../src/lcd.c  **** 	char *p = buf + 8;
 2748              		.loc 1 211 0
 2749 0968 1C304BE2 		sub	r3, fp, #28
 2750 096c 083083E2 		add	r3, r3, #8
 2751 0970 10300BE5 		str	r3, [fp, #-16]
 212:../src/lcd.c  **** 	uint8 c;
 213:../src/lcd.c  **** 	*p = '\0';
 2752              		.loc 1 213 0
 2753 0974 10301BE5 		ldr	r3, [fp, #-16]
 2754 0978 0020A0E3 		mov	r2, #0
 2755 097c 0020C3E5 		strb	r2, [r3, #0]
 2756              	.L59:
 214:../src/lcd.c  **** 
 215:../src/lcd.c  ****     do {
 216:../src/lcd.c  ****         c = i & 0xf;
 2757              		.loc 1 216 0
 2758 0980 28301BE5 		ldr	r3, [fp, #-40]
 2759 0984 FF3003E2 		and	r3, r3, #255
 2760 0988 0F3003E2 		and	r3, r3, #15
 2761 098c 11304BE5 		strb	r3, [fp, #-17]
 217:../src/lcd.c  ****         if( c < 10 )
 2762              		.loc 1 217 0
 2763 0990 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2764 0994 090053E3 		cmp	r3, #9
 2765 0998 0800008A 		bhi	.L57
 218:../src/lcd.c  ****             *--p = '0' + c;
 2766              		.loc 1 218 0
 2767 099c 10301BE5 		ldr	r3, [fp, #-16]
 2768 09a0 013043E2 		sub	r3, r3, #1
 2769 09a4 10300BE5 		str	r3, [fp, #-16]
 2770 09a8 11305BE5 		ldrb	r3, [fp, #-17]
 2771 09ac 303083E2 		add	r3, r3, #48
 2772 09b0 FF2003E2 		and	r2, r3, #255
 2773 09b4 10301BE5 		ldr	r3, [fp, #-16]
 2774 09b8 0020C3E5 		strb	r2, [r3, #0]
 2775 09bc 070000EA 		b	.L58
 2776              	.L57:
 219:../src/lcd.c  ****         else
 220:../src/lcd.c  ****             *--p = 'A' + c - 10;
 2777              		.loc 1 220 0
 2778 09c0 10301BE5 		ldr	r3, [fp, #-16]
 2779 09c4 013043E2 		sub	r3, r3, #1
 2780 09c8 10300BE5 		str	r3, [fp, #-16]
 2781 09cc 11305BE5 		ldrb	r3, [fp, #-17]
 2782 09d0 373083E2 		add	r3, r3, #55
 2783 09d4 FF2003E2 		and	r2, r3, #255
 2784 09d8 10301BE5 		ldr	r3, [fp, #-16]
 2785 09dc 0020C3E5 		strb	r2, [r3, #0]
 2786              	.L58:
 221:../src/lcd.c  ****         i = i >> 4;
 2787              		.loc 1 221 0
 2788 09e0 28301BE5 		ldr	r3, [fp, #-40]
 2789 09e4 2332A0E1 		mov	r3, r3, lsr #4
 2790 09e8 28300BE5 		str	r3, [fp, #-40]
 222:../src/lcd.c  ****     } while( i );
 2791              		.loc 1 222 0
 2792 09ec 28301BE5 		ldr	r3, [fp, #-40]
 2793 09f0 000053E3 		cmp	r3, #0
 2794 09f4 E1FFFF1A 		bne	.L59
 223:../src/lcd.c  **** 	lcd_puts(x, y, color, p);
 2795              		.loc 1 223 0
 2796 09f8 BE115BE1 		ldrh	r1, [fp, #-30]
 2797 09fc B0225BE1 		ldrh	r2, [fp, #-32]
 2798 0a00 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2799 0a04 0100A0E1 		mov	r0, r1
 2800 0a08 0210A0E1 		mov	r1, r2
 2801 0a0c 0320A0E1 		mov	r2, r3
 2802 0a10 10301BE5 		ldr	r3, [fp, #-16]
 2803 0a14 FEFFFFEB 		bl	lcd_puts
 224:../src/lcd.c  **** 
 225:../src/lcd.c  **** }
 2804              		.loc 1 225 0
 2805 0a18 0CD04BE2 		sub	sp, fp, #12
 2806 0a1c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2807 0a20 1EFF2FE1 		bx	lr
 2808              		.cfi_endproc
 2809              	.LFE13:
 2811              		.align	2
 2812              		.global	lcd_putchar_x2
 2814              	lcd_putchar_x2:
 2815              	.LFB14:
 226:../src/lcd.c  **** 
 227:../src/lcd.c  **** void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
 228:../src/lcd.c  **** {
 2816              		.loc 1 228 0
 2817              		.cfi_startproc
 2818              		@ Function supports interworking.
 2819              		@ args = 0, pretend = 0, frame = 16
 2820              		@ frame_needed = 1, uses_anonymous_args = 0
 2821 0a24 0DC0A0E1 		mov	ip, sp
 2822              	.LCFI28:
 2823              		.cfi_def_cfa_register 12
 2824 0a28 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2825 0a2c 04B04CE2 		sub	fp, ip, #4
 2826              		.cfi_offset 14, -8
 2827              		.cfi_offset 13, -12
 2828              		.cfi_offset 11, -16
 2829              	.LCFI29:
 2830              		.cfi_def_cfa 11, 4
 2831 0a30 10D04DE2 		sub	sp, sp, #16
 2832 0a34 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2833 0a38 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2834 0a3c 19204BE5 		strb	r2, [fp, #-25]
 2835 0a40 1A304BE5 		strb	r3, [fp, #-26]
 229:../src/lcd.c  ****     uint8 line, row;
 230:../src/lcd.c  ****     uint8 *bitmap;
 231:../src/lcd.c  **** 
 232:../src/lcd.c  ****     bitmap = font + ch*16;
 2836              		.loc 1 232 0
 2837 0a44 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2838 0a48 0332A0E1 		mov	r3, r3, asl #4
 2839 0a4c 0320A0E1 		mov	r2, r3
 2840 0a50 F8339FE5 		ldr	r3, .L67
 2841 0a54 033082E0 		add	r3, r2, r3
 2842 0a58 14300BE5 		str	r3, [fp, #-20]
 233:../src/lcd.c  ****     for( line=0; line<16; line++ )
 2843              		.loc 1 233 0
 2844 0a5c 0030A0E3 		mov	r3, #0
 2845 0a60 0D304BE5 		strb	r3, [fp, #-13]
 2846 0a64 F30000EA 		b	.L61
 2847              	.L66:
 234:../src/lcd.c  ****         for( row=0; row<8; row++ )
 2848              		.loc 1 234 0
 2849 0a68 0030A0E3 		mov	r3, #0
 2850 0a6c 0E304BE5 		strb	r3, [fp, #-14]
 2851 0a70 EA0000EA 		b	.L62
 2852              	.L65:
 235:../src/lcd.c  ****             if( bitmap[line] & (0x80 >> row) ){
 2853              		.loc 1 235 0
 2854 0a74 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2855 0a78 14201BE5 		ldr	r2, [fp, #-20]
 2856 0a7c 033082E0 		add	r3, r2, r3
 2857 0a80 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2858 0a84 0320A0E1 		mov	r2, r3
 2859 0a88 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2860 0a8c 8010A0E3 		mov	r1, #128
 2861 0a90 5133A0E1 		mov	r3, r1, asr r3
 2862 0a94 033002E0 		and	r3, r2, r3
 2863 0a98 000053E3 		cmp	r3, #0
 2864 0a9c 7000000A 		beq	.L63
 236:../src/lcd.c  ****                 lcd_putpixel( x+row*2, y+line*2, color );
 2865              		.loc 1 236 0
 2866 0aa0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2867 0aa4 0338A0E1 		mov	r3, r3, asl #16
 2868 0aa8 2338A0E1 		mov	r3, r3, lsr #16
 2869 0aac 8330A0E1 		mov	r3, r3, asl #1
 2870 0ab0 0338A0E1 		mov	r3, r3, asl #16
 2871 0ab4 2328A0E1 		mov	r2, r3, lsr #16
 2872 0ab8 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2873 0abc 033082E0 		add	r3, r2, r3
 2874 0ac0 0338A0E1 		mov	r3, r3, asl #16
 2875 0ac4 2318A0E1 		mov	r1, r3, lsr #16
 2876 0ac8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2877 0acc 0338A0E1 		mov	r3, r3, asl #16
 2878 0ad0 2338A0E1 		mov	r3, r3, lsr #16
 2879 0ad4 8330A0E1 		mov	r3, r3, asl #1
 2880 0ad8 0338A0E1 		mov	r3, r3, asl #16
 2881 0adc 2328A0E1 		mov	r2, r3, lsr #16
 2882 0ae0 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2883 0ae4 033082E0 		add	r3, r2, r3
 2884 0ae8 0338A0E1 		mov	r3, r3, asl #16
 2885 0aec 2328A0E1 		mov	r2, r3, lsr #16
 2886 0af0 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2887 0af4 0100A0E1 		mov	r0, r1
 2888 0af8 0210A0E1 		mov	r1, r2
 2889 0afc 0320A0E1 		mov	r2, r3
 2890 0b00 FEFFFFEB 		bl	lcd_putpixel
 237:../src/lcd.c  ****     			lcd_putpixel( x+row*2+1, y+line*2, color );
 2891              		.loc 1 237 0
 2892 0b04 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2893 0b08 0338A0E1 		mov	r3, r3, asl #16
 2894 0b0c 2338A0E1 		mov	r3, r3, lsr #16
 2895 0b10 8330A0E1 		mov	r3, r3, asl #1
 2896 0b14 0338A0E1 		mov	r3, r3, asl #16
 2897 0b18 2328A0E1 		mov	r2, r3, lsr #16
 2898 0b1c B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2899 0b20 033082E0 		add	r3, r2, r3
 2900 0b24 0338A0E1 		mov	r3, r3, asl #16
 2901 0b28 2338A0E1 		mov	r3, r3, lsr #16
 2902 0b2c 013083E2 		add	r3, r3, #1
 2903 0b30 0338A0E1 		mov	r3, r3, asl #16
 2904 0b34 2318A0E1 		mov	r1, r3, lsr #16
 2905 0b38 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2906 0b3c 0338A0E1 		mov	r3, r3, asl #16
 2907 0b40 2338A0E1 		mov	r3, r3, lsr #16
 2908 0b44 8330A0E1 		mov	r3, r3, asl #1
 2909 0b48 0338A0E1 		mov	r3, r3, asl #16
 2910 0b4c 2328A0E1 		mov	r2, r3, lsr #16
 2911 0b50 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2912 0b54 033082E0 		add	r3, r2, r3
 2913 0b58 0338A0E1 		mov	r3, r3, asl #16
 2914 0b5c 2328A0E1 		mov	r2, r3, lsr #16
 2915 0b60 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2916 0b64 0100A0E1 		mov	r0, r1
 2917 0b68 0210A0E1 		mov	r1, r2
 2918 0b6c 0320A0E1 		mov	r2, r3
 2919 0b70 FEFFFFEB 		bl	lcd_putpixel
 238:../src/lcd.c  ****     			lcd_putpixel( x+row*2, y+line*2+1, color );
 2920              		.loc 1 238 0
 2921 0b74 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2922 0b78 0338A0E1 		mov	r3, r3, asl #16
 2923 0b7c 2338A0E1 		mov	r3, r3, lsr #16
 2924 0b80 8330A0E1 		mov	r3, r3, asl #1
 2925 0b84 0338A0E1 		mov	r3, r3, asl #16
 2926 0b88 2328A0E1 		mov	r2, r3, lsr #16
 2927 0b8c B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2928 0b90 033082E0 		add	r3, r2, r3
 2929 0b94 0338A0E1 		mov	r3, r3, asl #16
 2930 0b98 2318A0E1 		mov	r1, r3, lsr #16
 2931 0b9c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2932 0ba0 0338A0E1 		mov	r3, r3, asl #16
 2933 0ba4 2338A0E1 		mov	r3, r3, lsr #16
 2934 0ba8 8330A0E1 		mov	r3, r3, asl #1
 2935 0bac 0338A0E1 		mov	r3, r3, asl #16
 2936 0bb0 2328A0E1 		mov	r2, r3, lsr #16
 2937 0bb4 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2938 0bb8 033082E0 		add	r3, r2, r3
 2939 0bbc 0338A0E1 		mov	r3, r3, asl #16
 2940 0bc0 2338A0E1 		mov	r3, r3, lsr #16
 2941 0bc4 013083E2 		add	r3, r3, #1
 2942 0bc8 0338A0E1 		mov	r3, r3, asl #16
 2943 0bcc 2328A0E1 		mov	r2, r3, lsr #16
 2944 0bd0 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2945 0bd4 0100A0E1 		mov	r0, r1
 2946 0bd8 0210A0E1 		mov	r1, r2
 2947 0bdc 0320A0E1 		mov	r2, r3
 2948 0be0 FEFFFFEB 		bl	lcd_putpixel
 239:../src/lcd.c  ****     			lcd_putpixel( x+row*2+1, y+line*2+1, color );
 2949              		.loc 1 239 0
 2950 0be4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2951 0be8 0338A0E1 		mov	r3, r3, asl #16
 2952 0bec 2338A0E1 		mov	r3, r3, lsr #16
 2953 0bf0 8330A0E1 		mov	r3, r3, asl #1
 2954 0bf4 0338A0E1 		mov	r3, r3, asl #16
 2955 0bf8 2328A0E1 		mov	r2, r3, lsr #16
 2956 0bfc B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2957 0c00 033082E0 		add	r3, r2, r3
 2958 0c04 0338A0E1 		mov	r3, r3, asl #16
 2959 0c08 2338A0E1 		mov	r3, r3, lsr #16
 2960 0c0c 013083E2 		add	r3, r3, #1
 2961 0c10 0338A0E1 		mov	r3, r3, asl #16
 2962 0c14 2318A0E1 		mov	r1, r3, lsr #16
 2963 0c18 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2964 0c1c 0338A0E1 		mov	r3, r3, asl #16
 2965 0c20 2338A0E1 		mov	r3, r3, lsr #16
 2966 0c24 8330A0E1 		mov	r3, r3, asl #1
 2967 0c28 0338A0E1 		mov	r3, r3, asl #16
 2968 0c2c 2328A0E1 		mov	r2, r3, lsr #16
 2969 0c30 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2970 0c34 033082E0 		add	r3, r2, r3
 2971 0c38 0338A0E1 		mov	r3, r3, asl #16
 2972 0c3c 2338A0E1 		mov	r3, r3, lsr #16
 2973 0c40 013083E2 		add	r3, r3, #1
 2974 0c44 0338A0E1 		mov	r3, r3, asl #16
 2975 0c48 2328A0E1 		mov	r2, r3, lsr #16
 2976 0c4c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2977 0c50 0100A0E1 		mov	r0, r1
 2978 0c54 0210A0E1 		mov	r1, r2
 2979 0c58 0320A0E1 		mov	r2, r3
 2980 0c5c FEFFFFEB 		bl	lcd_putpixel
 2981 0c60 6B0000EA 		b	.L64
 2982              	.L63:
 240:../src/lcd.c  ****             }
 241:../src/lcd.c  ****             else{
 242:../src/lcd.c  ****                 lcd_putpixel( x+row*2, y+line*2, WHITE );
 2983              		.loc 1 242 0
 2984 0c64 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2985 0c68 0338A0E1 		mov	r3, r3, asl #16
 2986 0c6c 2338A0E1 		mov	r3, r3, lsr #16
 2987 0c70 8330A0E1 		mov	r3, r3, asl #1
 2988 0c74 0338A0E1 		mov	r3, r3, asl #16
 2989 0c78 2328A0E1 		mov	r2, r3, lsr #16
 2990 0c7c B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2991 0c80 033082E0 		add	r3, r2, r3
 2992 0c84 0338A0E1 		mov	r3, r3, asl #16
 2993 0c88 2328A0E1 		mov	r2, r3, lsr #16
 2994 0c8c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2995 0c90 0338A0E1 		mov	r3, r3, asl #16
 2996 0c94 2338A0E1 		mov	r3, r3, lsr #16
 2997 0c98 8330A0E1 		mov	r3, r3, asl #1
 2998 0c9c 0338A0E1 		mov	r3, r3, asl #16
 2999 0ca0 2318A0E1 		mov	r1, r3, lsr #16
 3000 0ca4 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3001 0ca8 033081E0 		add	r3, r1, r3
 3002 0cac 0338A0E1 		mov	r3, r3, asl #16
 3003 0cb0 2338A0E1 		mov	r3, r3, lsr #16
 3004 0cb4 0200A0E1 		mov	r0, r2
 3005 0cb8 0310A0E1 		mov	r1, r3
 3006 0cbc 0020A0E3 		mov	r2, #0
 3007 0cc0 FEFFFFEB 		bl	lcd_putpixel
 243:../src/lcd.c  **** 				lcd_putpixel( x+row*2+1, y+line*2, WHITE );
 3008              		.loc 1 243 0
 3009 0cc4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3010 0cc8 0338A0E1 		mov	r3, r3, asl #16
 3011 0ccc 2338A0E1 		mov	r3, r3, lsr #16
 3012 0cd0 8330A0E1 		mov	r3, r3, asl #1
 3013 0cd4 0338A0E1 		mov	r3, r3, asl #16
 3014 0cd8 2328A0E1 		mov	r2, r3, lsr #16
 3015 0cdc B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3016 0ce0 033082E0 		add	r3, r2, r3
 3017 0ce4 0338A0E1 		mov	r3, r3, asl #16
 3018 0ce8 2338A0E1 		mov	r3, r3, lsr #16
 3019 0cec 013083E2 		add	r3, r3, #1
 3020 0cf0 0338A0E1 		mov	r3, r3, asl #16
 3021 0cf4 2328A0E1 		mov	r2, r3, lsr #16
 3022 0cf8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3023 0cfc 0338A0E1 		mov	r3, r3, asl #16
 3024 0d00 2338A0E1 		mov	r3, r3, lsr #16
 3025 0d04 8330A0E1 		mov	r3, r3, asl #1
 3026 0d08 0338A0E1 		mov	r3, r3, asl #16
 3027 0d0c 2318A0E1 		mov	r1, r3, lsr #16
 3028 0d10 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3029 0d14 033081E0 		add	r3, r1, r3
 3030 0d18 0338A0E1 		mov	r3, r3, asl #16
 3031 0d1c 2338A0E1 		mov	r3, r3, lsr #16
 3032 0d20 0200A0E1 		mov	r0, r2
 3033 0d24 0310A0E1 		mov	r1, r3
 3034 0d28 0020A0E3 		mov	r2, #0
 3035 0d2c FEFFFFEB 		bl	lcd_putpixel
 244:../src/lcd.c  **** 				lcd_putpixel( x+row*2, y+line*2+1, WHITE );
 3036              		.loc 1 244 0
 3037 0d30 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3038 0d34 0338A0E1 		mov	r3, r3, asl #16
 3039 0d38 2338A0E1 		mov	r3, r3, lsr #16
 3040 0d3c 8330A0E1 		mov	r3, r3, asl #1
 3041 0d40 0338A0E1 		mov	r3, r3, asl #16
 3042 0d44 2328A0E1 		mov	r2, r3, lsr #16
 3043 0d48 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3044 0d4c 033082E0 		add	r3, r2, r3
 3045 0d50 0338A0E1 		mov	r3, r3, asl #16
 3046 0d54 2328A0E1 		mov	r2, r3, lsr #16
 3047 0d58 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3048 0d5c 0338A0E1 		mov	r3, r3, asl #16
 3049 0d60 2338A0E1 		mov	r3, r3, lsr #16
 3050 0d64 8330A0E1 		mov	r3, r3, asl #1
 3051 0d68 0338A0E1 		mov	r3, r3, asl #16
 3052 0d6c 2318A0E1 		mov	r1, r3, lsr #16
 3053 0d70 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3054 0d74 033081E0 		add	r3, r1, r3
 3055 0d78 0338A0E1 		mov	r3, r3, asl #16
 3056 0d7c 2338A0E1 		mov	r3, r3, lsr #16
 3057 0d80 013083E2 		add	r3, r3, #1
 3058 0d84 0338A0E1 		mov	r3, r3, asl #16
 3059 0d88 2338A0E1 		mov	r3, r3, lsr #16
 3060 0d8c 0200A0E1 		mov	r0, r2
 3061 0d90 0310A0E1 		mov	r1, r3
 3062 0d94 0020A0E3 		mov	r2, #0
 3063 0d98 FEFFFFEB 		bl	lcd_putpixel
 245:../src/lcd.c  **** 				lcd_putpixel( x+row*2+1, y+line*2+1, WHITE );
 3064              		.loc 1 245 0
 3065 0d9c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3066 0da0 0338A0E1 		mov	r3, r3, asl #16
 3067 0da4 2338A0E1 		mov	r3, r3, lsr #16
 3068 0da8 8330A0E1 		mov	r3, r3, asl #1
 3069 0dac 0338A0E1 		mov	r3, r3, asl #16
 3070 0db0 2328A0E1 		mov	r2, r3, lsr #16
 3071 0db4 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3072 0db8 033082E0 		add	r3, r2, r3
 3073 0dbc 0338A0E1 		mov	r3, r3, asl #16
 3074 0dc0 2338A0E1 		mov	r3, r3, lsr #16
 3075 0dc4 013083E2 		add	r3, r3, #1
 3076 0dc8 0338A0E1 		mov	r3, r3, asl #16
 3077 0dcc 2328A0E1 		mov	r2, r3, lsr #16
 3078 0dd0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3079 0dd4 0338A0E1 		mov	r3, r3, asl #16
 3080 0dd8 2338A0E1 		mov	r3, r3, lsr #16
 3081 0ddc 8330A0E1 		mov	r3, r3, asl #1
 3082 0de0 0338A0E1 		mov	r3, r3, asl #16
 3083 0de4 2318A0E1 		mov	r1, r3, lsr #16
 3084 0de8 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3085 0dec 033081E0 		add	r3, r1, r3
 3086 0df0 0338A0E1 		mov	r3, r3, asl #16
 3087 0df4 2338A0E1 		mov	r3, r3, lsr #16
 3088 0df8 013083E2 		add	r3, r3, #1
 3089 0dfc 0338A0E1 		mov	r3, r3, asl #16
 3090 0e00 2338A0E1 		mov	r3, r3, lsr #16
 3091 0e04 0200A0E1 		mov	r0, r2
 3092 0e08 0310A0E1 		mov	r1, r3
 3093 0e0c 0020A0E3 		mov	r2, #0
 3094 0e10 FEFFFFEB 		bl	lcd_putpixel
 3095              	.L64:
 234:../src/lcd.c  ****         for( row=0; row<8; row++ )
 3096              		.loc 1 234 0
 3097 0e14 0E305BE5 		ldrb	r3, [fp, #-14]
 3098 0e18 013083E2 		add	r3, r3, #1
 3099 0e1c 0E304BE5 		strb	r3, [fp, #-14]
 3100              	.L62:
 234:../src/lcd.c  ****         for( row=0; row<8; row++ )
 3101              		.loc 1 234 0 is_stmt 0 discriminator 1
 3102 0e20 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3103 0e24 070053E3 		cmp	r3, #7
 3104 0e28 11FFFF9A 		bls	.L65
 233:../src/lcd.c  ****     for( line=0; line<16; line++ )
 3105              		.loc 1 233 0 is_stmt 1
 3106 0e2c 0D305BE5 		ldrb	r3, [fp, #-13]
 3107 0e30 013083E2 		add	r3, r3, #1
 3108 0e34 0D304BE5 		strb	r3, [fp, #-13]
 3109              	.L61:
 233:../src/lcd.c  ****     for( line=0; line<16; line++ )
 3110              		.loc 1 233 0 is_stmt 0 discriminator 1
 3111 0e38 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3112 0e3c 0F0053E3 		cmp	r3, #15
 3113 0e40 08FFFF9A 		bls	.L66
 246:../src/lcd.c  ****             }
 247:../src/lcd.c  **** }
 3114              		.loc 1 247 0 is_stmt 1
 3115 0e44 0CD04BE2 		sub	sp, fp, #12
 3116 0e48 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3117 0e4c 1EFF2FE1 		bx	lr
 3118              	.L68:
 3119              		.align	2
 3120              	.L67:
 3121 0e50 00000000 		.word	font
 3122              		.cfi_endproc
 3123              	.LFE14:
 3125              		.align	2
 3126              		.global	lcd_puts_x2
 3128              	lcd_puts_x2:
 3129              	.LFB15:
 248:../src/lcd.c  **** 
 249:../src/lcd.c  **** void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
 250:../src/lcd.c  **** {
 3130              		.loc 1 250 0
 3131              		.cfi_startproc
 3132              		@ Function supports interworking.
 3133              		@ args = 0, pretend = 0, frame = 24
 3134              		@ frame_needed = 1, uses_anonymous_args = 0
 3135 0e54 0DC0A0E1 		mov	ip, sp
 3136              	.LCFI30:
 3137              		.cfi_def_cfa_register 12
 3138 0e58 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3139 0e5c 04B04CE2 		sub	fp, ip, #4
 3140              		.cfi_offset 14, -8
 3141              		.cfi_offset 13, -12
 3142              		.cfi_offset 11, -16
 3143              	.LCFI31:
 3144              		.cfi_def_cfa 11, 4
 3145 0e60 18D04DE2 		sub	sp, sp, #24
 3146 0e64 20300BE5 		str	r3, [fp, #-32]
 3147 0e68 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 3148 0e6c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 3149 0e70 0230A0E1 		mov	r3, r2
 3150 0e74 19304BE5 		strb	r3, [fp, #-25]
 251:../src/lcd.c  **** 	int i =0;
 3151              		.loc 1 251 0
 3152 0e78 0030A0E3 		mov	r3, #0
 3153 0e7c 10300BE5 		str	r3, [fp, #-16]
 252:../src/lcd.c  ****     while(s[i] != '\0'){
 3154              		.loc 1 252 0
 3155 0e80 0D0000EA 		b	.L70
 3156              	.L71:
 253:../src/lcd.c  ****     	lcd_putchar_x2(x,y,color,s[i]);
 3157              		.loc 1 253 0
 3158 0e84 10301BE5 		ldr	r3, [fp, #-16]
 3159 0e88 20201BE5 		ldr	r2, [fp, #-32]
 3160 0e8c 033082E0 		add	r3, r2, r3
 3161 0e90 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3162 0e94 B6015BE1 		ldrh	r0, [fp, #-22]
 3163 0e98 B8115BE1 		ldrh	r1, [fp, #-24]
 3164 0e9c 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 3165 0ea0 FEFFFFEB 		bl	lcd_putchar_x2
 254:../src/lcd.c  ****     	x += 16;
 3166              		.loc 1 254 0
 3167 0ea4 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3168 0ea8 103083E2 		add	r3, r3, #16
 3169 0eac B6314BE1 		strh	r3, [fp, #-22]	@ movhi
 255:../src/lcd.c  ****     	i++;
 3170              		.loc 1 255 0
 3171 0eb0 10301BE5 		ldr	r3, [fp, #-16]
 3172 0eb4 013083E2 		add	r3, r3, #1
 3173 0eb8 10300BE5 		str	r3, [fp, #-16]
 3174              	.L70:
 252:../src/lcd.c  ****     while(s[i] != '\0'){
 3175              		.loc 1 252 0 discriminator 1
 3176 0ebc 10301BE5 		ldr	r3, [fp, #-16]
 3177 0ec0 20201BE5 		ldr	r2, [fp, #-32]
 3178 0ec4 033082E0 		add	r3, r2, r3
 3179 0ec8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3180 0ecc 000053E3 		cmp	r3, #0
 3181 0ed0 EBFFFF1A 		bne	.L71
 256:../src/lcd.c  ****     }
 257:../src/lcd.c  **** }
 3182              		.loc 1 257 0
 3183 0ed4 0CD04BE2 		sub	sp, fp, #12
 3184 0ed8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3185 0edc 1EFF2FE1 		bx	lr
 3186              		.cfi_endproc
 3187              	.LFE15:
 3189              		.align	2
 3190              		.global	lcd_putint_x2
 3192              	lcd_putint_x2:
 3193              	.LFB16:
 258:../src/lcd.c  **** 
 259:../src/lcd.c  **** void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i )
 260:../src/lcd.c  **** {
 3194              		.loc 1 260 0
 3195              		.cfi_startproc
 3196              		@ Function supports interworking.
 3197              		@ args = 0, pretend = 0, frame = 48
 3198              		@ frame_needed = 1, uses_anonymous_args = 0
 3199 0ee0 0DC0A0E1 		mov	ip, sp
 3200              	.LCFI32:
 3201              		.cfi_def_cfa_register 12
 3202 0ee4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3203 0ee8 04B04CE2 		sub	fp, ip, #4
 3204              		.cfi_offset 14, -8
 3205              		.cfi_offset 13, -12
 3206              		.cfi_offset 11, -16
 3207              	.LCFI33:
 3208              		.cfi_def_cfa 11, 4
 3209 0eec 30D04DE2 		sub	sp, sp, #48
 3210 0ef0 38300BE5 		str	r3, [fp, #-56]
 3211 0ef4 BE024BE1 		strh	r0, [fp, #-46]	@ movhi
 3212 0ef8 B0134BE1 		strh	r1, [fp, #-48]	@ movhi
 3213 0efc 0230A0E1 		mov	r3, r2
 3214 0f00 31304BE5 		strb	r3, [fp, #-49]
 261:../src/lcd.c  **** 	char buf[20 + 1];
 262:../src/lcd.c  **** 	char *p = buf + 20;
 3215              		.loc 1 262 0
 3216 0f04 28304BE2 		sub	r3, fp, #40
 3217 0f08 143083E2 		add	r3, r3, #20
 3218 0f0c 10300BE5 		str	r3, [fp, #-16]
 263:../src/lcd.c  **** 	uint8 c;
 264:../src/lcd.c  **** 	if (i < 0){
 3219              		.loc 1 264 0
 3220 0f10 38301BE5 		ldr	r3, [fp, #-56]
 3221 0f14 000053E3 		cmp	r3, #0
 3222 0f18 0D0000AA 		bge	.L73
 265:../src/lcd.c  **** 		lcd_putchar_x2(x,y,color,'-');
 3223              		.loc 1 265 0
 3224 0f1c BE125BE1 		ldrh	r1, [fp, #-46]
 3225 0f20 B0235BE1 		ldrh	r2, [fp, #-48]
 3226 0f24 31305BE5 		ldrb	r3, [fp, #-49]	@ zero_extendqisi2
 3227 0f28 0100A0E1 		mov	r0, r1
 3228 0f2c 0210A0E1 		mov	r1, r2
 3229 0f30 0320A0E1 		mov	r2, r3
 3230 0f34 2D30A0E3 		mov	r3, #45
 3231 0f38 FEFFFFEB 		bl	lcd_putchar_x2
 266:../src/lcd.c  **** 		x=x+8;
 3232              		.loc 1 266 0
 3233 0f3c BE325BE1 		ldrh	r3, [fp, #-46]	@ movhi
 3234 0f40 083083E2 		add	r3, r3, #8
 3235 0f44 BE324BE1 		strh	r3, [fp, #-46]	@ movhi
 267:../src/lcd.c  **** 		i= i * -1;
 3236              		.loc 1 267 0
 3237 0f48 38301BE5 		ldr	r3, [fp, #-56]
 3238 0f4c 003063E2 		rsb	r3, r3, #0
 3239 0f50 38300BE5 		str	r3, [fp, #-56]
 3240              	.L73:
 268:../src/lcd.c  **** 	}
 269:../src/lcd.c  **** 	*p = '\0';
 3241              		.loc 1 269 0
 3242 0f54 10301BE5 		ldr	r3, [fp, #-16]
 3243 0f58 0020A0E3 		mov	r2, #0
 3244 0f5c 0020C3E5 		strb	r2, [r3, #0]
 3245              	.L74:
 270:../src/lcd.c  **** 
 271:../src/lcd.c  **** 	do {
 272:../src/lcd.c  **** 		c = i % 10;
 3246              		.loc 1 272 0 discriminator 1
 3247 0f60 38101BE5 		ldr	r1, [fp, #-56]
 3248 0f64 9C309FE5 		ldr	r3, .L75
 3249 0f68 9123C3E0 		smull	r2, r3, r1, r3
 3250 0f6c 4321A0E1 		mov	r2, r3, asr #2
 3251 0f70 C13FA0E1 		mov	r3, r1, asr #31
 3252 0f74 022063E0 		rsb	r2, r3, r2
 3253 0f78 0230A0E1 		mov	r3, r2
 3254 0f7c 0331A0E1 		mov	r3, r3, asl #2
 3255 0f80 023083E0 		add	r3, r3, r2
 3256 0f84 8330A0E1 		mov	r3, r3, asl #1
 3257 0f88 012063E0 		rsb	r2, r3, r1
 3258 0f8c 0230A0E1 		mov	r3, r2
 3259 0f90 11304BE5 		strb	r3, [fp, #-17]
 273:../src/lcd.c  **** 		*--p = '0' + c;
 3260              		.loc 1 273 0 discriminator 1
 3261 0f94 10301BE5 		ldr	r3, [fp, #-16]
 3262 0f98 013043E2 		sub	r3, r3, #1
 3263 0f9c 10300BE5 		str	r3, [fp, #-16]
 3264 0fa0 11305BE5 		ldrb	r3, [fp, #-17]
 3265 0fa4 303083E2 		add	r3, r3, #48
 3266 0fa8 FF2003E2 		and	r2, r3, #255
 3267 0fac 10301BE5 		ldr	r3, [fp, #-16]
 3268 0fb0 0020C3E5 		strb	r2, [r3, #0]
 274:../src/lcd.c  **** 		i = i /10;
 3269              		.loc 1 274 0 discriminator 1
 3270 0fb4 38301BE5 		ldr	r3, [fp, #-56]
 3271 0fb8 48209FE5 		ldr	r2, .L75
 3272 0fbc 9312C2E0 		smull	r1, r2, r3, r2
 3273 0fc0 4221A0E1 		mov	r2, r2, asr #2
 3274 0fc4 C33FA0E1 		mov	r3, r3, asr #31
 3275 0fc8 023063E0 		rsb	r3, r3, r2
 3276 0fcc 38300BE5 		str	r3, [fp, #-56]
 275:../src/lcd.c  **** 	} while( i );
 3277              		.loc 1 275 0 discriminator 1
 3278 0fd0 38301BE5 		ldr	r3, [fp, #-56]
 3279 0fd4 000053E3 		cmp	r3, #0
 3280 0fd8 E0FFFF1A 		bne	.L74
 276:../src/lcd.c  **** 	lcd_puts_x2(x, y, color, p);
 3281              		.loc 1 276 0
 3282 0fdc BE125BE1 		ldrh	r1, [fp, #-46]
 3283 0fe0 B0235BE1 		ldrh	r2, [fp, #-48]
 3284 0fe4 31305BE5 		ldrb	r3, [fp, #-49]	@ zero_extendqisi2
 3285 0fe8 0100A0E1 		mov	r0, r1
 3286 0fec 0210A0E1 		mov	r1, r2
 3287 0ff0 0320A0E1 		mov	r2, r3
 3288 0ff4 10301BE5 		ldr	r3, [fp, #-16]
 3289 0ff8 FEFFFFEB 		bl	lcd_puts_x2
 277:../src/lcd.c  **** 
 278:../src/lcd.c  **** }
 3290              		.loc 1 278 0
 3291 0ffc 0CD04BE2 		sub	sp, fp, #12
 3292 1000 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3293 1004 1EFF2FE1 		bx	lr
 3294              	.L76:
 3295              		.align	2
 3296              	.L75:
 3297 1008 67666666 		.word	1717986919
 3298              		.cfi_endproc
 3299              	.LFE16:
 3301              		.align	2
 3302              		.global	lcd_puthex_x2
 3304              	lcd_puthex_x2:
 3305              	.LFB17:
 279:../src/lcd.c  **** 
 280:../src/lcd.c  **** void lcd_puthex_x2( uint16 x, uint16 y, uint8 color, uint32 i )
 281:../src/lcd.c  **** {
 3306              		.loc 1 281 0
 3307              		.cfi_startproc
 3308              		@ Function supports interworking.
 3309              		@ args = 0, pretend = 0, frame = 32
 3310              		@ frame_needed = 1, uses_anonymous_args = 0
 3311 100c 0DC0A0E1 		mov	ip, sp
 3312              	.LCFI34:
 3313              		.cfi_def_cfa_register 12
 3314 1010 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3315 1014 04B04CE2 		sub	fp, ip, #4
 3316              		.cfi_offset 14, -8
 3317              		.cfi_offset 13, -12
 3318              		.cfi_offset 11, -16
 3319              	.LCFI35:
 3320              		.cfi_def_cfa 11, 4
 3321 1018 20D04DE2 		sub	sp, sp, #32
 3322 101c 28300BE5 		str	r3, [fp, #-40]
 3323 1020 BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 3324 1024 B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 3325 1028 0230A0E1 		mov	r3, r2
 3326 102c 21304BE5 		strb	r3, [fp, #-33]
 282:../src/lcd.c  **** 	char buf[8 + 1];
 283:../src/lcd.c  **** 	char *p = buf + 8;
 3327              		.loc 1 283 0
 3328 1030 1C304BE2 		sub	r3, fp, #28
 3329 1034 083083E2 		add	r3, r3, #8
 3330 1038 10300BE5 		str	r3, [fp, #-16]
 284:../src/lcd.c  **** 	uint8 c;
 285:../src/lcd.c  **** 	*p = '\0';
 3331              		.loc 1 285 0
 3332 103c 10301BE5 		ldr	r3, [fp, #-16]
 3333 1040 0020A0E3 		mov	r2, #0
 3334 1044 0020C3E5 		strb	r2, [r3, #0]
 3335              	.L80:
 286:../src/lcd.c  **** 
 287:../src/lcd.c  ****     do {
 288:../src/lcd.c  ****         c = i & 0xf;
 3336              		.loc 1 288 0
 3337 1048 28301BE5 		ldr	r3, [fp, #-40]
 3338 104c FF3003E2 		and	r3, r3, #255
 3339 1050 0F3003E2 		and	r3, r3, #15
 3340 1054 11304BE5 		strb	r3, [fp, #-17]
 289:../src/lcd.c  ****         if( c < 10 )
 3341              		.loc 1 289 0
 3342 1058 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3343 105c 090053E3 		cmp	r3, #9
 3344 1060 0800008A 		bhi	.L78
 290:../src/lcd.c  ****             *--p = '0' + c;
 3345              		.loc 1 290 0
 3346 1064 10301BE5 		ldr	r3, [fp, #-16]
 3347 1068 013043E2 		sub	r3, r3, #1
 3348 106c 10300BE5 		str	r3, [fp, #-16]
 3349 1070 11305BE5 		ldrb	r3, [fp, #-17]
 3350 1074 303083E2 		add	r3, r3, #48
 3351 1078 FF2003E2 		and	r2, r3, #255
 3352 107c 10301BE5 		ldr	r3, [fp, #-16]
 3353 1080 0020C3E5 		strb	r2, [r3, #0]
 3354 1084 070000EA 		b	.L79
 3355              	.L78:
 291:../src/lcd.c  ****         else
 292:../src/lcd.c  ****             *--p = 'A' + c - 10;
 3356              		.loc 1 292 0
 3357 1088 10301BE5 		ldr	r3, [fp, #-16]
 3358 108c 013043E2 		sub	r3, r3, #1
 3359 1090 10300BE5 		str	r3, [fp, #-16]
 3360 1094 11305BE5 		ldrb	r3, [fp, #-17]
 3361 1098 373083E2 		add	r3, r3, #55
 3362 109c FF2003E2 		and	r2, r3, #255
 3363 10a0 10301BE5 		ldr	r3, [fp, #-16]
 3364 10a4 0020C3E5 		strb	r2, [r3, #0]
 3365              	.L79:
 293:../src/lcd.c  ****         i = i >> 4;
 3366              		.loc 1 293 0
 3367 10a8 28301BE5 		ldr	r3, [fp, #-40]
 3368 10ac 2332A0E1 		mov	r3, r3, lsr #4
 3369 10b0 28300BE5 		str	r3, [fp, #-40]
 294:../src/lcd.c  ****     } while( i );
 3370              		.loc 1 294 0
 3371 10b4 28301BE5 		ldr	r3, [fp, #-40]
 3372 10b8 000053E3 		cmp	r3, #0
 3373 10bc E1FFFF1A 		bne	.L80
 295:../src/lcd.c  **** 	lcd_puts_x2(x, y, color, p);
 3374              		.loc 1 295 0
 3375 10c0 BE115BE1 		ldrh	r1, [fp, #-30]
 3376 10c4 B0225BE1 		ldrh	r2, [fp, #-32]
 3377 10c8 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3378 10cc 0100A0E1 		mov	r0, r1
 3379 10d0 0210A0E1 		mov	r1, r2
 3380 10d4 0320A0E1 		mov	r2, r3
 3381 10d8 10301BE5 		ldr	r3, [fp, #-16]
 3382 10dc FEFFFFEB 		bl	lcd_puts_x2
 296:../src/lcd.c  **** 
 297:../src/lcd.c  **** }
 3383              		.loc 1 297 0
 3384 10e0 0CD04BE2 		sub	sp, fp, #12
 3385 10e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3386 10e8 1EFF2FE1 		bx	lr
 3387              		.cfi_endproc
 3388              	.LFE17:
 3390              		.align	2
 3391              		.global	lcd_putWallpaper
 3393              	lcd_putWallpaper:
 3394              	.LFB18:
 298:../src/lcd.c  **** 
 299:../src/lcd.c  **** void lcd_putWallpaper( uint8 *bmp )
 300:../src/lcd.c  **** {
 3395              		.loc 1 300 0
 3396              		.cfi_startproc
 3397              		@ Function supports interworking.
 3398              		@ args = 0, pretend = 0, frame = 24
 3399              		@ frame_needed = 1, uses_anonymous_args = 0
 3400 10ec 0DC0A0E1 		mov	ip, sp
 3401              	.LCFI36:
 3402              		.cfi_def_cfa_register 12
 3403 10f0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3404 10f4 04B04CE2 		sub	fp, ip, #4
 3405              		.cfi_offset 14, -8
 3406              		.cfi_offset 13, -12
 3407              		.cfi_offset 11, -16
 3408              	.LCFI37:
 3409              		.cfi_def_cfa 11, 4
 3410 10f8 18D04DE2 		sub	sp, sp, #24
 3411 10fc 20000BE5 		str	r0, [fp, #-32]
 301:../src/lcd.c  ****     uint32 headerSize;
 302:../src/lcd.c  **** 
 303:../src/lcd.c  ****     uint16 x, ySrc, yDst;
 304:../src/lcd.c  ****     uint16 offsetSrc, offsetDst;
 305:../src/lcd.c  **** 
 306:../src/lcd.c  ****     headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 3412              		.loc 1 306 0
 3413 1100 20301BE5 		ldr	r3, [fp, #-32]
 3414 1104 0A3083E2 		add	r3, r3, #10
 3415 1108 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3416 110c 0320A0E1 		mov	r2, r3
 3417 1110 20301BE5 		ldr	r3, [fp, #-32]
 3418 1114 0B3083E2 		add	r3, r3, #11
 3419 1118 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3420 111c 0334A0E1 		mov	r3, r3, asl #8
 3421 1120 032082E0 		add	r2, r2, r3
 3422 1124 20301BE5 		ldr	r3, [fp, #-32]
 3423 1128 0C3083E2 		add	r3, r3, #12
 3424 112c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3425 1130 0338A0E1 		mov	r3, r3, asl #16
 3426 1134 032082E0 		add	r2, r2, r3
 3427 1138 20301BE5 		ldr	r3, [fp, #-32]
 3428 113c 0D3083E2 		add	r3, r3, #13
 3429 1140 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3430 1144 033CA0E1 		mov	r3, r3, asl #24
 3431 1148 033082E0 		add	r3, r2, r3
 3432 114c 18300BE5 		str	r3, [fp, #-24]
 307:../src/lcd.c  **** 
 308:../src/lcd.c  ****     bmp = bmp + headerSize;
 3433              		.loc 1 308 0
 3434 1150 20201BE5 		ldr	r2, [fp, #-32]
 3435 1154 18301BE5 		ldr	r3, [fp, #-24]
 3436 1158 033082E0 		add	r3, r2, r3
 3437 115c 20300BE5 		str	r3, [fp, #-32]
 309:../src/lcd.c  ****     
 310:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3438              		.loc 1 310 0
 3439 1160 0030A0E3 		mov	r3, #0
 3440 1164 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3441 1168 EF30A0E3 		mov	r3, #239
 3442 116c B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3443 1170 2D0000EA 		b	.L82
 3444              	.L85:
 311:../src/lcd.c  ****     {
 312:../src/lcd.c  ****         offsetDst = yDst*LCD_WIDTH/2;
 3445              		.loc 1 312 0
 3446 1174 B2215BE1 		ldrh	r2, [fp, #-18]
 3447 1178 0230A0E1 		mov	r3, r2
 3448 117c 0331A0E1 		mov	r3, r3, asl #2
 3449 1180 023083E0 		add	r3, r3, r2
 3450 1184 0333A0E1 		mov	r3, r3, asl #6
 3451 1188 A32FA0E1 		mov	r2, r3, lsr #31
 3452 118c 033082E0 		add	r3, r2, r3
 3453 1190 C330A0E1 		mov	r3, r3, asr #1
 3454 1194 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 313:../src/lcd.c  ****         offsetSrc = ySrc*LCD_WIDTH/2;
 3455              		.loc 1 313 0
 3456 1198 B0215BE1 		ldrh	r2, [fp, #-16]
 3457 119c 0230A0E1 		mov	r3, r2
 3458 11a0 0331A0E1 		mov	r3, r3, asl #2
 3459 11a4 023083E0 		add	r3, r3, r2
 3460 11a8 0333A0E1 		mov	r3, r3, asl #6
 3461 11ac A32FA0E1 		mov	r2, r3, lsr #31
 3462 11b0 033082E0 		add	r3, r2, r3
 3463 11b4 C330A0E1 		mov	r3, r3, asr #1
 3464 11b8 BC314BE1 		strh	r3, [fp, #-28]	@ movhi
 314:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3465              		.loc 1 314 0
 3466 11bc 0030A0E3 		mov	r3, #0
 3467 11c0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3468 11c4 0F0000EA 		b	.L83
 3469              	.L84:
 315:../src/lcd.c  ****             lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 3470              		.loc 1 315 0 discriminator 2
 3471 11c8 BA215BE1 		ldrh	r2, [fp, #-26]
 3472 11cc BE305BE1 		ldrh	r3, [fp, #-14]
 3473 11d0 033082E0 		add	r3, r2, r3
 3474 11d4 BC115BE1 		ldrh	r1, [fp, #-28]
 3475 11d8 BE205BE1 		ldrh	r2, [fp, #-14]
 3476 11dc 022081E0 		add	r2, r1, r2
 3477 11e0 20101BE5 		ldr	r1, [fp, #-32]
 3478 11e4 022081E0 		add	r2, r1, r2
 3479 11e8 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3480 11ec 0220E0E1 		mvn	r2, r2
 3481 11f0 FF1002E2 		and	r1, r2, #255
 3482 11f4 48209FE5 		ldr	r2, .L86
 3483 11f8 0310C2E7 		strb	r1, [r2, r3]
 314:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3484              		.loc 1 314 0 discriminator 2
 3485 11fc BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3486 1200 013083E2 		add	r3, r3, #1
 3487 1204 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3488              	.L83:
 314:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3489              		.loc 1 314 0 is_stmt 0 discriminator 1
 3490 1208 BE305BE1 		ldrh	r3, [fp, #-14]
 3491 120c 9F0053E3 		cmp	r3, #159
 3492 1210 ECFFFF9A 		bls	.L84
 310:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3493              		.loc 1 310 0 is_stmt 1
 3494 1214 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 3495 1218 013083E2 		add	r3, r3, #1
 3496 121c B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3497 1220 B2315BE1 		ldrh	r3, [fp, #-18]	@ movhi
 3498 1224 013043E2 		sub	r3, r3, #1
 3499 1228 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3500              	.L82:
 310:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3501              		.loc 1 310 0 is_stmt 0 discriminator 1
 3502 122c B0315BE1 		ldrh	r3, [fp, #-16]
 3503 1230 EF0053E3 		cmp	r3, #239
 3504 1234 CEFFFF9A 		bls	.L85
 316:../src/lcd.c  ****     }
 317:../src/lcd.c  **** }
 3505              		.loc 1 317 0 is_stmt 1
 3506 1238 0CD04BE2 		sub	sp, fp, #12
 3507 123c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3508 1240 1EFF2FE1 		bx	lr
 3509              	.L87:
 3510              		.align	2
 3511              	.L86:
 3512 1244 00000000 		.word	lcd_buffer
 3513              		.cfi_endproc
 3514              	.LFE18:
 3516              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1703   .bss:00000000 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1704   .bss:00000000 lcd_buffer
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1706   .bss:00009600 state
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1709   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1712   .text:00000000 lcd_init
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1893   .text:000001c0 lcd_off
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1817   .text:00000110 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1849   .text:00000184 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1852   .text:00000184 lcd_on
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1886   .text:000001bc $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1890   .text:000001c0 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1927   .text:000001f8 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1931   .text:000001fc $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1934   .text:000001fc lcd_status
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1962   .text:00000220 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1966   .text:00000224 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:1969   .text:00000224 lcd_clear
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2016   .text:0000027c $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2021   .text:00000284 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2024   .text:00000284 lcd_putpixel
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2111   .text:0000036c $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2115   .text:00000370 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2118   .text:00000370 lcd_getpixel
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2197   .text:00000438 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2201   .text:0000043c $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2204   .text:0000043c lcd_draw_hline
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2280   .text:000004e4 lcd_draw_vline
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2356   .text:0000058c lcd_draw_box
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2424   .text:00000638 lcd_putchar
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2542   .text:00000788 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2546   .text:0000078c $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2549   .text:0000078c lcd_puts
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2613   .text:00000818 lcd_putint
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2718   .text:00000940 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2722   .text:00000944 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2725   .text:00000944 lcd_puthex
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:2814   .text:00000a24 lcd_putchar_x2
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:3121   .text:00000e50 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:3125   .text:00000e54 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:3128   .text:00000e54 lcd_puts_x2
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:3192   .text:00000ee0 lcd_putint_x2
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:3297   .text:00001008 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:3301   .text:0000100c $a
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:3304   .text:0000100c lcd_puthex_x2
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:3393   .text:000010ec lcd_putWallpaper
C:\Users\USUARI~1\AppData\Local\Temp\cc0kWYf2.s:3512   .text:00001244 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
font
